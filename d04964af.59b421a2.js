(window.webpackJsonp=window.webpackJsonp||[]).push([[304],{374:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return b}));var r=n(3),o=n(7),a=(n(0),n(450)),i={id:"grpc",title:"Zeebe API (gRPC)"},s={unversionedId:"reference/grpc",id:"reference/grpc",isDocsHomePage:!1,title:"Zeebe API (gRPC)",description:"Zeebe clients use gRPC to communicate with the cluster.",source:"@site/docs/reference/grpc.md",slug:"/reference/grpc",permalink:"/docs/reference/grpc",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/reference/grpc.md",version:"current",sidebar:"Reference",previous:{title:"Console API (REST)",permalink:"/docs/reference/cloud-console-api-reference"},next:{title:"GraphQL schema",permalink:"/docs/reference/tasklist-api/schema"}},l=[{value:"Gateway Service",id:"gateway-service",children:[{value:"<code>ActivateJobs</code> RPC",id:"activatejobs-rpc",children:[]},{value:"<code>CancelWorkflowInstance</code> RPC",id:"cancelworkflowinstance-rpc",children:[]},{value:"<code>CompleteJob</code> RPC",id:"completejob-rpc",children:[]},{value:"<code>CreateWorkflowInstance</code> RPC",id:"createworkflowinstance-rpc",children:[]},{value:"<code>CreateWorkflowInstanceWithResult</code> RPC",id:"createworkflowinstancewithresult-rpc",children:[]},{value:"<code>DeployWorkflow</code> RPC",id:"deployworkflow-rpc",children:[]},{value:"<code>FailJob</code> RPC",id:"failjob-rpc",children:[]},{value:"<code>PublishMessage</code> RPC",id:"publishmessage-rpc",children:[]},{value:"<code>ResolveIncident</code> RPC",id:"resolveincident-rpc",children:[]},{value:"<code>SetVariables</code> RPC",id:"setvariables-rpc",children:[]},{value:"<code>ThrowError</code> RPC",id:"throwerror-rpc",children:[]},{value:"<code>Topology</code> RPC",id:"topology-rpc",children:[]},{value:"<code>UpdateJobRetries</code> RPC",id:"updatejobretries-rpc",children:[]}]},{value:"Technical Error Handling",id:"technical-error-handling",children:[]}],c={rightToc:l};function b(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/product-manuals/zeebe/zeebe-overview"}),"Zeebe")," clients use ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://grpc.io/"}),"gRPC")," to communicate with the cluster."),Object(a.b)("blockquote",null,Object(a.b)("p",{parentName:"blockquote"},Object(a.b)("strong",{parentName:"p"},"Note:")," This specification still contains references to YAML workflows. This is a ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/docs/product-manuals/zeebe/open-source/deprecated-features"}),"deprecated feature")," and will be removed at some point")),Object(a.b)("h2",{id:"gateway-service"},"Gateway Service"),Object(a.b)("p",null,"The Zeebe Client gRPC API is exposed through a single gateway service."),Object(a.b)("h3",{id:"activatejobs-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"ActivateJobs")," RPC"),Object(a.b)("p",null,"Iterates through all known partitions round-robin and activates up to the requested\nmaximum and streams them back to the client as they are activated."),Object(a.b)("h4",{id:"input-activatejobsrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"ActivateJobsRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),'message ActivateJobsRequest {\n  // the job type, as defined in the BPMN process (e.g. <zeebe:taskDefinition\n  // type="payment-service" />)\n  string type = 1;\n  // the name of the worker activating the jobs, mostly used for logging purposes\n  string worker = 2;\n  // a job returned after this call will not be activated by another call until the\n  // timeout (in ms) has been reached\n  int64 timeout = 3;\n  // the maximum jobs to activate by this request\n  int32 maxJobsToActivate = 4;\n  // a list of variables to fetch as the job variables; if empty, all visible variables at\n  // the time of activation for the scope of the job will be returned\n  repeated string fetchVariable = 5;\n  // The request will be completed when at least one job is activated or after the requestTimeout (in ms).\n  // if the requestTimeout = 0, a default timeout is used.\n  // if the requestTimeout < 0, long polling is disabled and the request is completed immediately, even when no job is activated.\n  int64 requestTimeout = 6;\n}\n')),Object(a.b)("h4",{id:"output-activatejobsresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"ActivateJobsResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message ActivateJobsResponse {\n  // list of activated jobs\n  repeated ActivatedJob jobs = 1;\n}\n\nmessage ActivatedJob {\n  // the key, a unique identifier for the job\n  int64 key = 1;\n  // the type of the job (should match what was requested)\n  string type = 2;\n  // the job's workflow instance key\n  int64 workflowInstanceKey = 3;\n  // the bpmn process ID of the job workflow definition\n  string bpmnProcessId = 4;\n  // the version of the job workflow definition\n  int32 workflowDefinitionVersion = 5;\n  // the key of the job workflow definition\n  int64 workflowKey = 6;\n  // the associated task element ID\n  string elementId = 7;\n  // the unique key identifying the associated task, unique within the scope of the\n  // workflow instance\n  int64 elementInstanceKey = 8;\n  // a set of custom headers defined during modelling; returned as a serialized\n  // JSON document\n  string customHeaders = 9;\n  // the name of the worker which activated this job\n  string worker = 10;\n  // the amount of retries left to this job (should always be positive)\n  int32 retries = 11;\n  // when the job can be activated again, sent as a UNIX epoch timestamp\n  int64 deadline = 12;\n  // JSON document, computed at activation time, consisting of all visible variables to\n  // the task scope\n  string variables = 13;\n}\n")),Object(a.b)("h4",{id:"errors"},"Errors"),Object(a.b)("h5",{id:"grpc_status_invalid_argument"},"GRPC_STATUS_INVALID_ARGUMENT"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"type is blank (empty string, null)"),Object(a.b)("li",{parentName:"ul"},"worker is blank (empty string, null)"),Object(a.b)("li",{parentName:"ul"},"timeout less than 1 (ms)"),Object(a.b)("li",{parentName:"ul"},"amount is less than 1")),Object(a.b)("h3",{id:"cancelworkflowinstance-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"CancelWorkflowInstance")," RPC"),Object(a.b)("p",null,"Cancels a running workflow instance"),Object(a.b)("h4",{id:"input-cancelworkflowinstancerequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"CancelWorkflowInstanceRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CancelWorkflowInstanceRequest {\n  // the workflow instance key (as, for example, obtained from\n  // CreateWorkflowInstanceResponse)\n  int64 workflowInstanceKey = 1;\n}\n")),Object(a.b)("h4",{id:"output-cancelworkflowinstanceresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"CancelWorkflowInstanceResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CancelWorkflowInstanceResponse {\n}\n")),Object(a.b)("h4",{id:"errors-1"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no workflow instance exists with the given key. Note that since workflow instances\nare removed once their are finished, it could mean the instance did exist at some point.")),Object(a.b)("h3",{id:"completejob-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"CompleteJob")," RPC"),Object(a.b)("p",null,"Completes a job with the given payload, which allows completing the associated service task."),Object(a.b)("h4",{id:"input-completejobrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"CompleteJobRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CompleteJobRequest {\n  // the unique job identifier, as obtained from ActivateJobsResponse\n  int64 jobKey = 1;\n  // a JSON document representing the variables in the current task scope\n  string variables = 2;\n}\n")),Object(a.b)("h4",{id:"output-completejobresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"CompleteJobResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CompleteJobResponse {\n}\n")),Object(a.b)("h4",{id:"errors-2"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-1"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no job exists with the given job key. Note that since jobs are removed once completed,\nit could be that this job did exist at some point.")),Object(a.b)("h5",{id:"grpc_status_failed_precondition"},"GRPC_STATUS_FAILED_PRECONDITION"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the job was marked as failed. In that case, the related incident must be resolved before\nthe job can be activated again and completed.")),Object(a.b)("h3",{id:"createworkflowinstance-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"CreateWorkflowInstance")," RPC"),Object(a.b)("p",null,"Creates and starts an instance of the specified workflow. The workflow definition to use\nto create the instance can be specified either using its unique key (as returned by\nDeployWorkflow), or using the BPMN process ID and a version. Pass -1 as the version to\nuse the latest deployed version."),Object(a.b)("p",null,"Note that only workflows with none start events can be started through this command."),Object(a.b)("h4",{id:"input-createworkflowinstancerequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"CreateWorkflowInstanceRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),'message CreateWorkflowInstanceRequest {\n  // the unique key identifying the workflow definition (e.g. returned from a workflow\n  // in the DeployWorkflowResponse message)\n  int64 workflowKey = 1;\n  // the BPMN process ID of the workflow definition\n  string bpmnProcessId = 2;\n  // the version of the process; set to -1 to use the latest version\n  int32 version = 3;\n  // JSON document that will instantiate the variables for the root variable scope of the\n  // workflow instance; it must be a JSON object, as variables will be mapped in a\n  // key-value fashion. e.g. { "a": 1, "b": 2 } will create two variables, named "a" and\n  // "b" respectively, with their associated values. [{ "a": 1, "b": 2 }] would not be a\n  // valid argument, as the root of the JSON document is an array and not an object.\n  string variables = 4;\n}\n')),Object(a.b)("h4",{id:"output-createworkflowinstanceresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"CreateWorkflowInstanceResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CreateWorkflowInstanceResponse {\n  // the key of the workflow definition which was used to create the workflow instance\n  int64 workflowKey = 1;\n  // the BPMN process ID of the workflow definition which was used to create the workflow\n  // instance\n  string bpmnProcessId = 2;\n  // the version of the workflow definition which was used to create the workflow instance\n  int32 version = 3;\n  // the unique identifier of the created workflow instance; to be used wherever a request\n  // needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)\n  int64 workflowInstanceKey = 4;\n}\n")),Object(a.b)("h3",{id:"createworkflowinstancewithresult-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"CreateWorkflowInstanceWithResult")," RPC"),Object(a.b)("p",null,"Similar to ",Object(a.b)("inlineCode",{parentName:"p"},"CreateWorkflowInstance")," RPC , creates and starts an instance of the specified workflow.\nUnlike ",Object(a.b)("inlineCode",{parentName:"p"},"CreateWorkflowInstance")," RPC, the response is returned when the workflow is completed."),Object(a.b)("p",null,"Note that only workflows with none start events can be started through this command."),Object(a.b)("h4",{id:"input-createworkflowinstancewithresultrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"CreateWorkflowInstanceWithResultRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CreateWorkflowInstanceRequest {\n   CreateWorkflowInstanceRequest request = 1;\n   // timeout (in ms). the request will be closed if the workflow is not completed before\n   // the requestTimeout.\n   // if requestTimeout = 0, uses the generic requestTimeout configured in the gateway.\n   int64 requestTimeout = 2;\n}\n")),Object(a.b)("h4",{id:"output-createworkflowinstancewithresultresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"CreateWorkflowInstanceWithResultResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message CreateWorkflowInstanceResponse {\n  // the key of the workflow definition which was used to create the workflow instance\n  int64 workflowKey = 1;\n  // the BPMN process ID of the workflow definition which was used to create the workflow\n  // instance\n  string bpmnProcessId = 2;\n  // the version of the workflow definition which was used to create the workflow instance\n  int32 version = 3;\n  // the unique identifier of the created workflow instance; to be used wherever a request\n  // needs a workflow instance key (e.g. CancelWorkflowInstanceRequest)\n  int64 workflowInstanceKey = 4;\n  // consisting of all visible variables to the root scope\n  string variables = 5;\n}\n")),Object(a.b)("h4",{id:"errors-3"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-2"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no workflow with the given key exists (if workflowKey was given)"),Object(a.b)("li",{parentName:"ul"},"no workflow with the given process ID exists (if bpmnProcessId was given but version was -1)"),Object(a.b)("li",{parentName:"ul"},"no workflow with the given process ID and version exists (if both bpmnProcessId and version were given)")),Object(a.b)("h5",{id:"grpc_status_failed_precondition-1"},"GRPC_STATUS_FAILED_PRECONDITION"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the workflow definition does not contain a none start event; only workflows with none\nstart event can be started manually.")),Object(a.b)("h5",{id:"grpc_status_invalid_argument-1"},"GRPC_STATUS_INVALID_ARGUMENT"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the given variables argument is not a valid JSON document; it is expected to be a valid\nJSON document where the root node is an object.")),Object(a.b)("h3",{id:"deployworkflow-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"DeployWorkflow")," RPC"),Object(a.b)("p",null,"Deploys one or more workflows to Zeebe. Note that this is an atomic call,\ni.e. either all workflows are deployed, or none of them are."),Object(a.b)("h4",{id:"input-deployworkflowrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"DeployWorkflowRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message DeployWorkflowRequest {\n  // List of workflow resources to deploy\n  repeated WorkflowRequestObject workflows = 1;\n}\n\nmessage WorkflowRequestObject {\n  enum ResourceType {\n    // FILE type means the gateway will try to detect the resource type\n    // using the file extension of the name field\n    FILE = 0;\n    BPMN = 1; // extension 'bpmn'\n    YAML = 2; // extension 'yaml'\n  }\n\n  // the resource basename, e.g. myProcess.bpmn\n  string name = 1;\n  // the resource type; if set to BPMN or YAML then the file extension\n  // is ignored\n  ResourceType type = 2;\n  // the process definition as a UTF8-encoded string\n  bytes definition = 3;\n}\n")),Object(a.b)("h4",{id:"output-deployworkflowresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"DeployWorkflowResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message DeployWorkflowResponse {\n  // the unique key identifying the deployment\n  int64 key = 1;\n  // a list of deployed workflows\n  repeated WorkflowMetadata workflows = 2;\n}\n\nmessage WorkflowMetadata {\n  // the bpmn process ID, as parsed during deployment; together with the version forms a\n  // unique identifier for a specific workflow definition\n  string bpmnProcessId = 1;\n  // the assigned process version\n  int32 version = 2;\n  // the assigned key, which acts as a unique identifier for this workflow\n  int64 workflowKey = 3;\n  // the resource name (see: WorkflowRequestObject.name) from which this workflow was\n  // parsed\n  string resourceName = 4;\n}\n")),Object(a.b)("h4",{id:"errors-4"},"Errors"),Object(a.b)("h5",{id:"grpc_status_invalid_argument-2"},"GRPC_STATUS_INVALID_ARGUMENT"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no resources given."),Object(a.b)("li",{parentName:"ul"},"if at least one resource is invalid. A resource is considered invalid if:",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"it is not a BPMN or YAML file (currently detected through the file extension)"),Object(a.b)("li",{parentName:"ul"},"the resource data is not deserializable (e.g. detected as BPMN, but it's broken XML)"),Object(a.b)("li",{parentName:"ul"},"the workflow is invalid (e.g. an event-based gateway has an outgoing sequence flow to a task)")))),Object(a.b)("h3",{id:"failjob-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"FailJob")," RPC"),Object(a.b)("p",null,"Marks the job as failed; if the retries argument is positive, then the job will be immediately\nactivatable again, and a worker could try again to process it. If it is zero or negative however,\nan incident will be raised, tagged with the given errorMessage, and the job will not be\nactivatable until the incident is resolved."),Object(a.b)("h4",{id:"input-failjobrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"FailJobRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message FailJobRequest {\n  // the unique job identifier, as obtained when activating the job\n  int64 jobKey = 1;\n  // the amount of retries the job should have left\n  int32 retries = 2;\n  // an optional message describing why the job failed\n  // this is particularly useful if a job runs out of retries and an incident is raised,\n  // as it this message can help explain why an incident was raised\n  string errorMessage = 3;\n}\n")),Object(a.b)("h4",{id:"output-failjobresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"FailJobResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message FailJobResponse {\n}\n")),Object(a.b)("h4",{id:"errors-5"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-3"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no job was found with the given key")),Object(a.b)("h5",{id:"grpc_status_failed_precondition-2"},"GRPC_STATUS_FAILED_PRECONDITION"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the job was not activated"),Object(a.b)("li",{parentName:"ul"},"the job is already in a failed state, i.e. ran out of retries")),Object(a.b)("h3",{id:"publishmessage-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"PublishMessage")," RPC"),Object(a.b)("p",null,"Publishes a single message. Messages are published to specific partitions computed from their\ncorrelation keys."),Object(a.b)("h4",{id:"input-publishmessagerequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"PublishMessageRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),'message PublishMessageRequest {\n  // the name of the message\n  string name = 1;\n  // the correlation key of the message\n  string correlationKey = 2;\n  // how long the message should be buffered on the broker, in milliseconds\n  int64 timeToLive = 3;\n  // the unique ID of the message; can be omitted. only useful to ensure only one message\n  // with the given ID will ever be published (during its lifetime)\n  string messageId = 4;\n  // the message variables as a JSON document; to be valid, the root of the document must be an\n  // object, e.g. { "a": "foo" }. [ "foo" ] would not be valid.\n  string variables = 5;\n}\n')),Object(a.b)("h4",{id:"output-publishmessageresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"PublishMessageResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message PublishMessageResponse {\n  // the unique ID of the message that was published\n  int64 key = 1;\n}\n")),Object(a.b)("h4",{id:"errors-6"},"Errors"),Object(a.b)("h5",{id:"grpc_status_already_exists"},"GRPC_STATUS_ALREADY_EXISTS"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"a message with the same ID was previously published (and is still alive)")),Object(a.b)("h3",{id:"resolveincident-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"ResolveIncident")," RPC"),Object(a.b)("p",null,"Resolves a given incident. This simply marks the incident as resolved; most likely a call to\nUpdateJobRetries or UpdateWorkflowInstancePayload will be necessary to actually resolve the\nproblem, following by this call."),Object(a.b)("h4",{id:"input-resolveincidentrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"ResolveIncidentRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message ResolveIncidentRequest {\n  // the unique ID of the incident to resolve\n  int64 incidentKey = 1;\n}\n")),Object(a.b)("h4",{id:"output-resolveincidentresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"ResolveIncidentResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message ResolveIncidentResponse {\n}\n")),Object(a.b)("h4",{id:"errors-7"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-4"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no incident with the given key exists")),Object(a.b)("h3",{id:"setvariables-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"SetVariables")," RPC"),Object(a.b)("p",null,"Updates all the variables of a particular scope (e.g. workflow instance, flow element instance) from the given JSON document."),Object(a.b)("h4",{id:"input-setvariablesrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"SetVariablesRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),'message SetVariablesRequest {\n  // the unique identifier of a particular element; can be the workflow instance key (as\n  // obtained during instance creation), or a given element, such as a service task (see\n  // elementInstanceKey on the job message)\n  int64 elementInstanceKey = 1;\n  // a JSON serialized document describing variables as key value pairs; the root of the document\n  // must be an object\n  string variables = 2;\n  // if true, the variables will be merged strictly into the local scope (as indicated by\n  // elementInstanceKey); this means the variables is not propagated to upper scopes.\n  // for example, let\'s say we have two scopes, \'1\' and \'2\', with each having effective variables as:\n  // 1 => `{ "foo" : 2 }`, and 2 => `{ "bar" : 1 }`. if we send an update request with\n  // elementInstanceKey = 2, variables `{ "foo" : 5 }`, and local is true, then scope 1 will\n  // be unchanged, and scope 2 will now be `{ "bar" : 1, "foo" 5 }`. if local was false, however,\n  // then scope 1 would be `{ "foo": 5 }`, and scope 2 would be `{ "bar" : 1 }`.\n  bool local = 3;\n}\n')),Object(a.b)("h4",{id:"output-setvariablesresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"SetVariablesResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message SetVariablesResponse {\n  // the unique key of the set variables command\n  int64 key = 1;\n}\n")),Object(a.b)("h4",{id:"errors-8"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-5"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no element with the given ",Object(a.b)("inlineCode",{parentName:"li"},"elementInstanceKey")," was exists")),Object(a.b)("h5",{id:"grpc_status_invalid_argument-3"},"GRPC_STATUS_INVALID_ARGUMENT"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the given payload is not a valid JSON document; all payloads are expected to be\nvalid JSON documents where the root node is an object.")),Object(a.b)("h3",{id:"throwerror-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"ThrowError")," RPC"),Object(a.b)("p",null,"Throw an error to indicate that a business error is occurred while processing the job. The error is identified by an error code and is handled by an error catch event in the workflow with the same error code."),Object(a.b)("h4",{id:"input-throwerrorrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"ThrowErrorRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message ThrowErrorRequest {\n  // the unique job identifier, as obtained when activating the job\n  int64 jobKey = 1;\n  // the error code that will be matched with an error catch event\n  string errorCode = 2;\n  // an optional error message that provides additional context\n  string errorMessage = 3;\n}\n")),Object(a.b)("h4",{id:"output-throwerrorresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"ThrowErrorResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message ThrowErrorResponse {\n}\n")),Object(a.b)("h4",{id:"errors-9"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-6"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no job was found with the given key")),Object(a.b)("h5",{id:"grpc_status_failed_precondition-3"},"GRPC_STATUS_FAILED_PRECONDITION"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"the job is already in a failed state, i.e. ran out of retries")),Object(a.b)("h3",{id:"topology-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"Topology")," RPC"),Object(a.b)("p",null,"Obtains the current topology of the cluster the gateway is part of."),Object(a.b)("h4",{id:"input-topologyrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"TopologyRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message TopologyRequest {\n}\n")),Object(a.b)("h4",{id:"output-topologyresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"TopologyResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message TopologyResponse {\n  // list of brokers part of this cluster\n  repeated BrokerInfo brokers = 1;\n  // how many nodes are in the cluster\n  int32 clusterSize = 2;\n  // how many partitions are spread across the cluster\n  int32 partitionsCount = 3;\n  // configured replication factor for this cluster\n  int32 replicationFactor = 4;\n  // gateway version\n  string gatewayVersion = 5;\n}\n\nmessage BrokerInfo {\n  // unique (within a cluster) node ID for the broker\n  int32 nodeId = 1;\n  // hostname of the broker\n  string host = 2;\n  // port for the broker\n  int32 port = 3;\n  // list of partitions managed or replicated on this broker\n  repeated Partition partitions = 4;\n  // broker version\n  string version = 5;\n}\n\nmessage Partition {\n  // Describes the Raft role of the broker for a given partition\n  enum PartitionBrokerRole {\n    LEADER = 0;\n    FOLLOWER = 1;\n  }\n\n  // Describes the current health of the partition\n  enum PartitionBrokerHealth {\n    HEALTHY = 0;\n    UNHEALTHY = 1;\n  }\n\n  // the unique ID of this partition\n  int32 partitionId = 1;\n  // the role of the broker for this partition\n  PartitionBrokerRole role = 2;\n  // the health of this partition\n  PartitionBrokerHealth health = 3;\n}\n")),Object(a.b)("h4",{id:"errors-10"},"Errors"),Object(a.b)("p",null,"No specific errors"),Object(a.b)("h3",{id:"updatejobretries-rpc"},Object(a.b)("inlineCode",{parentName:"h3"},"UpdateJobRetries")," RPC"),Object(a.b)("p",null,"Updates the number of retries a job has left. This is mostly useful for jobs that have run out of\nretries, should the underlying problem be solved."),Object(a.b)("h4",{id:"input-updatejobretriesrequest"},"Input: ",Object(a.b)("inlineCode",{parentName:"h4"},"UpdateJobRetriesRequest")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message UpdateJobRetriesRequest {\n  // the unique job identifier, as obtained through ActivateJobs\n  int64 jobKey = 1;\n  // the new amount of retries for the job; must be positive\n  int32 retries = 2;\n}\n")),Object(a.b)("h4",{id:"output-updatejobretriesresponse"},"Output: ",Object(a.b)("inlineCode",{parentName:"h4"},"UpdateJobRetriesResponse")),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-protobuf"}),"message UpdateJobRetriesResponse {\n}\n")),Object(a.b)("h4",{id:"errors-11"},"Errors"),Object(a.b)("h5",{id:"grpc_status_not_found-7"},"GRPC_STATUS_NOT_FOUND"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"no job exists with the given key")),Object(a.b)("h5",{id:"grpc_status_invalid_argument-4"},"GRPC_STATUS_INVALID_ARGUMENT"),Object(a.b)("p",null,"Returned if:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"retries is not greater than 0")),Object(a.b)("h2",{id:"technical-error-handling"},"Technical Error Handling"),Object(a.b)("p",null,"In the documentation above, the documented errors are business logic errors.\nThese are errors which are a result of request processing logic, and not serialization, network, or\nother more general errors. These error are described in this sections."),Object(a.b)("p",null,"The gRPC API for Zeebe is exposed through an API gateway, which acts as a proxy\nfor the cluster. Generally, this means that the clients execute a remote call on the gateway,\nwhich is then translated to special binary protocol that the gateway uses to\ncommunicate with nodes in the cluster. The nodes in the cluster are called brokers."),Object(a.b)("p",null,"Technical errors which occur between gateway and brokers (e.g. the gateway cannot deserialize the broker response,\nthe broker is unavailable, etc.) are reported to the client using the following error codes:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"GRPC_STATUS_RESOURCE_EXHAUSTED"),": when a broker receives more requests than it can handle, it signals back-pressure and rejects requests with this error code.",Object(a.b)("ul",{parentName:"li"},Object(a.b)("li",{parentName:"ul"},"In this case, it is possible to retry the requests with an appropriate retry strategy."),Object(a.b)("li",{parentName:"ul"},"If you receive many such errors within a small time period, it indicates that the broker is constantly under high load."),Object(a.b)("li",{parentName:"ul"},"It is recommended to reduce the rate of requests.\nWhen back-pressure is active, the broker may reject any request except ",Object(a.b)("em",{parentName:"li"},"CompleteJob")," RPC and ",Object(a.b)("em",{parentName:"li"},"FailJob")," RPC."),Object(a.b)("li",{parentName:"ul"},"These requests are white-listed for back-pressure and are always accepted by the broker even if it is receiving requests above its limits."))),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"GRPC_STATUS_UNAVAILABLE"),": if the gateway itself is in an invalid state (e.g. out of memory)"),Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"GRPC_STATUS_INTERNAL"),": for any other internal errors that occurred between the gateway and the broker.")),Object(a.b)("p",null,"This behavior applies to every request. In these cases, the client should retry\nwith an appropriate retry policy (e.g. a combination of exponential backoff or jitter wrapped\nin a circuit breaker)."),Object(a.b)("p",null,"As the gRPC server/client is based on generated code, keep in mind that\nany call made to the server can also return errors as described by the spec\n",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://grpc.io/docs/guides/error.html#error-status-codes"}),"here"),"."))}b.isMDXComponent=!0},450:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return h}));var r=n(0),o=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=o.a.createContext({}),b=function(e){var t=o.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=b(e.components);return o.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},d=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=b(n),d=r,h=u["".concat(i,".").concat(d)]||u[d]||p[d]||a;return n?o.a.createElement(h,s(s({ref:t},c),{},{components:n})):o.a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.a.createElement.apply(null,i)}return o.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);