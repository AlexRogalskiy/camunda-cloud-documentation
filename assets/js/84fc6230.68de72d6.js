(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[8354],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60093:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return d}});var o=n(22122),r=n(19756),a=(n(67294),n(3905)),i={id:"control-flow",title:"Control Flow"},s=void 0,l={unversionedId:"components/zeebe/yaml-workflows/control-flow",id:"version-0.25/components/zeebe/yaml-workflows/control-flow",isDocsHomePage:!1,title:"Control Flow",description:"Control flow is about the order in which tasks are executed. The YAML format provides tools to decide which task is executed when.",source:"@site/versioned_docs/version-0.25/components/zeebe/yaml-workflows/control-flow.md",sourceDirName:"components/zeebe/yaml-workflows",slug:"/components/zeebe/yaml-workflows/control-flow",permalink:"/docs/0.25/components/zeebe/yaml-workflows/control-flow",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.25/components/zeebe/yaml-workflows/control-flow.md",version:"0.25",frontMatter:{id:"control-flow",title:"Control Flow"},sidebar:"version-0.25/Components",previous:{title:"Tasks",permalink:"/docs/0.25/components/zeebe/yaml-workflows/tasks"},next:{title:"Data Flow",permalink:"/docs/0.25/components/zeebe/yaml-workflows/data-flow"}},c=[{value:"Sequences",id:"sequences",children:[]},{value:"Data-based Conditions",id:"data-based-conditions",children:[]},{value:"Additional Resources",id:"additional-resources",children:[]}],p={toc:c};function d(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Control flow")," is about the order in which tasks are executed. The YAML format provides tools to decide which task is executed when."),(0,a.kt)("h2",{id:"sequences"},"Sequences"),(0,a.kt)("p",null,"In a sequence, a task is executed after the previous one is completed.\nBy default, tasks are executed top-down as they are declared in the YAML file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: order-process\n\ntasks:\n    - id: collect-money\n      type: payment-service\n\n    - id: fetch-items\n      type: inventory-service\n\n    - id: ship-parcel\n      type: shipment-service\n")),(0,a.kt)("p",null,"In the example above, the workflow starts with ",(0,a.kt)("inlineCode",{parentName:"p"},"collect-money"),", followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch-items")," and ends with ",(0,a.kt)("inlineCode",{parentName:"p"},"ship-parcel"),"."),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"goto")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," attributes to define a different order:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: order-process\n\ntasks:\n    - id: collect-money\n      type: payment-service\n      goto: ship-parcel\n\n    - id: fetch-items\n      type: inventory-service\n      end: true\n\n    - id: ship-parcel\n      type: shipment-service\n      goto: fetch-items\n")),(0,a.kt)("p",null,"In the above example, we have reversed the order of ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch-items")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"ship-parcel"),". Note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"end")," attribute is required so that workflow execution stops after ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch-items"),"."),(0,a.kt)("h2",{id:"data-based-conditions"},"Data-based Conditions"),(0,a.kt)("p",null,"Some workflows do not always execute the same tasks but need to pick and choose different tasks, based on variables of the workflow instance."),(0,a.kt)("p",null,"We can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," attribute and conditions to decide on the next task."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"name: order-process\n\ntasks:\n    - id: collect-money\n      type: payment-service\n\n    - id: fetch-items\n      type: inventory-service\n      switch:\n          - case: totalPrice > 100\n            goto: ship-parcel-with-insurance\n\n          - default: ship-parcel\n\n    - id: ship-parcel-with-insurance\n      type: shipment-service-premium\n      end: true\n\n    - id: ship-parcel\n      type: shipment-service\n")),(0,a.kt)("p",null,"In the above example, the order-process starts with ",(0,a.kt)("inlineCode",{parentName:"p"},"collect-money"),", followed by ",(0,a.kt)("inlineCode",{parentName:"p"},"fetch-items"),".\nIf the variable ",(0,a.kt)("inlineCode",{parentName:"p"},"totalPrice")," is greater than 100, then it continues with ",(0,a.kt)("inlineCode",{parentName:"p"},"ship-parcel-with-insurance"),". Otherwise, ",(0,a.kt)("inlineCode",{parentName:"p"},"ship-parcel")," is chosen. In either case, the workflow instance ends after that."),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"switch")," element, there is one ",(0,a.kt)("inlineCode",{parentName:"p"},"case")," element per alternative to choose from. If none of the conditions evaluates to ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),", then the ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," element is evaluated. While ",(0,a.kt)("inlineCode",{parentName:"p"},"default")," is not required, it is best practice to include to avoid errors at workflow runtime. Should such an error occur (i.e. no case is fulfilled and there is no default), then workflow execution stops and an incident is raised."),(0,a.kt)("h2",{id:"additional-resources"},"Additional Resources"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.25/components/zeebe/reference/expressions#boolean-expressions"},"Boolean Expression"))))}d.isMDXComponent=!0}}]);