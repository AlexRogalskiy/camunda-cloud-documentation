(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[8627],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},84645:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var a=n(22122),r=n(19756),i=(n(67294),n(3905)),o={},l="Introduction",s={unversionedId:"components/zeebe/tasklist-deployment-guide/configuration",id:"version-0.25/components/zeebe/tasklist-deployment-guide/configuration",isDocsHomePage:!1,title:"Introduction",description:"Tasklist is a Spring Boot application. That means all ways to configure",source:"@site/versioned_docs/version-0.25/components/zeebe/tasklist-deployment-guide/configuration.md",sourceDirName:"components/zeebe/tasklist-deployment-guide",slug:"/components/zeebe/tasklist-deployment-guide/configuration",permalink:"/docs/0.25/components/zeebe/tasklist-deployment-guide/configuration",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.25/components/zeebe/tasklist-deployment-guide/configuration.md",version:"0.25",frontMatter:{}},c=[{value:"Settings to connect",id:"settings-to-connect",children:[]},{value:"A snippet from application.yml:",id:"a-snippet-from-applicationyml",children:[]},{value:"Settings to connect",id:"settings-to-connect-1",children:[]},{value:"A snippet from application.yml:",id:"a-snippet-from-applicationyml-1",children:[]},{value:"Settings to connect and import:",id:"settings-to-connect-and-import",children:[]},{value:"A snippet from application.yml:",id:"a-snippet-from-applicationyml-2",children:[]},{value:"Example snippets to use Tasklist probes in Kubernetes:",id:"example-snippets-to-use-tasklist-probes-in-kubernetes",children:[{value:"Readiness probe as yaml config:",id:"readiness-probe-as-yaml-config",children:[]},{value:"Liveness probe as yaml config:",id:"liveness-probe-as-yaml-config",children:[]},{value:"JSON logging configuration",id:"json-logging-configuration",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"Tasklist is a Spring Boot application. That means all ways to ",(0,i.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config"},"configure"),"\na Spring Boot application can be applied. By default, the configuration for Tasklist is stored in a YAML file ",(0,i.kt)("inlineCode",{parentName:"p"},"application.yml"),". All Tasklist related settings are prefixed\nwith ",(0,i.kt)("inlineCode",{parentName:"p"},"zeebe.tasklist"),". The following parts are configurable:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#elasticsearch"},"Elasticsearch Connection")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#zeebe-broker-connection"},"Zeebe Broker connection")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#zeebe-elasticsearch-exporter"},"Zeebe Elasticsearch Exporter")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/docs/0.25/components/zeebe/tasklist-deployment-guide/authentication"},"Authentication")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#monitoring-and-health-probes"},"Monitoring and health probes")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#logging"},"Logging configuration"))),(0,i.kt)("h1",{id:"configurations"},"Configurations"),(0,i.kt)("h1",{id:"elasticsearch"},"Elasticsearch"),(0,i.kt)("p",null,"Tasklist stores and reads data in/from Elasticsearch."),(0,i.kt)("h2",{id:"settings-to-connect"},"Settings to connect"),(0,i.kt)("p",null,"Tasklist supports ",(0,i.kt)("a",{parentName:"p",href:"https://www.elastic.co/guide/en/elasticsearch/reference/6.8/setting-up-authentication.html"},"basic authentication")," for elasticsearch.\nSet the appropriate username/password combination in the configuration to use it."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.elasticsearch.clusterName"),(0,i.kt)("td",{parentName:"tr",align:null},"Clustername of Elasticsearch"),(0,i.kt)("td",{parentName:"tr",align:null},"elasticsearch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.elasticsearch.url"),(0,i.kt)("td",{parentName:"tr",align:null},"URL of Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"http://localhost:9200")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.elasticsearch.username"),(0,i.kt)("td",{parentName:"tr",align:null},"Username to access Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.elasticsearch.password"),(0,i.kt)("td",{parentName:"tr",align:null},"Password to access Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h2",{id:"a-snippet-from-applicationyml"},"A snippet from application.yml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"zeebe.tasklist:\n  elasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Url\n    url: http://localhost:9200\n")),(0,i.kt)("h1",{id:"zeebe-broker-connection"},"Zeebe Broker Connection"),(0,i.kt)("p",null,"Tasklist needs a connection to Zeebe Broker to start the import."),(0,i.kt)("h2",{id:"settings-to-connect-1"},"Settings to connect"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebe.brokerContactPoint"),(0,i.kt)("td",{parentName:"tr",align:null},"Broker contact point to zeebe as hostname and port"),(0,i.kt)("td",{parentName:"tr",align:null},"localhost:26500")))),(0,i.kt)("h2",{id:"a-snippet-from-applicationyml-1"},"A snippet from application.yml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"zeebe.tasklist:\n  zeebe:\n    # Broker contact point\n    brokerContactPoint: localhost:26500\n")),(0,i.kt)("h1",{id:"zeebe-elasticsearch-exporter"},"Zeebe Elasticsearch Exporter"),(0,i.kt)("p",null,"Tasklist imports data from Elasticsearch indices created and filled in by ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/zeebe-io/zeebe/tree/develop/exporters/elasticsearch-exporter"},"Zeebe Elasticsearch Exporter"),".\nTherefore settings for this Elasticsearch connection must be defined and must correspond to the settings on Zeebe side."),(0,i.kt)("h2",{id:"settings-to-connect-and-import"},"Settings to connect and import:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Default value"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebeElasticsearch.clusterName"),(0,i.kt)("td",{parentName:"tr",align:null},"Cluster name of Elasticsearch"),(0,i.kt)("td",{parentName:"tr",align:null},"elasticsearch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebeElasticsearch.url"),(0,i.kt)("td",{parentName:"tr",align:null},"URL of Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"http://localhost:9200")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebeElasticsearch.prefix"),(0,i.kt)("td",{parentName:"tr",align:null},"Index prefix as configured in Zeebe Elasticsearch exporter"),(0,i.kt)("td",{parentName:"tr",align:null},"zeebe-record")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebeElasticsearch.username"),(0,i.kt)("td",{parentName:"tr",align:null},"Username to access Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"zeebe.tasklist.zeebeElasticsearch.password"),(0,i.kt)("td",{parentName:"tr",align:null},"Password to access Elasticsearch REST API"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h2",{id:"a-snippet-from-applicationyml-2"},"A snippet from application.yml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"zeebe.tasklist:\n  zeebeElasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Url\n    url: http://localhost:9200\n    # Index prefix, configured in Zeebe Elasticsearch exporter\n    prefix: zeebe-record\n")),(0,i.kt)("h1",{id:"monitoring-and-health-probes"},"Monitoring and health probes"),(0,i.kt)("p",null,"Tasklist includes ",(0,i.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready"},"Spring Boot Actuator")," inside, that\nprovides number of monitoring possibilities., e.g. health check (http://localhost:8080/actuator/health) and metrics (http://localhost:8080/actuator/prometheus) endpoints."),(0,i.kt)("p",null,"Tasklist uses following Actuator configuration by default:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# enable health check and metrics endpoints\nmanagement.endpoints.web.exposure.include: health,prometheus\n# enable Kubernetes health groups:\n# https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-kubernetes-probes\nmanagement.health.probes.enabled: true\n")),(0,i.kt)("p",null,"With this configuration following endpoints are available for use out of the box:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<server>:8080/actuator/prometheus")," Prometheus metrics"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<server>:8080/actuator/health/liveness")," Liveness probe"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"<server>:8080/actuator/health/readiness")," Readiness probe"),(0,i.kt)("h2",{id:"example-snippets-to-use-tasklist-probes-in-kubernetes"},"Example snippets to use Tasklist probes in Kubernetes:"),(0,i.kt)("p",null,"For details to set Kubernetes probes parameters see: ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/#configure-probes"},"Kubernetes configure probes")),(0,i.kt)("h3",{id:"readiness-probe-as-yaml-config"},"Readiness probe as yaml config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"readinessProbe:\n     httpGet:\n        path: /actuator/health/readiness\n        port: 8080\n     initialDelaySeconds: 30\n     periodSeconds: 30\n")),(0,i.kt)("h3",{id:"liveness-probe-as-yaml-config"},"Liveness probe as yaml config:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"livenessProbe:\n     httpGet:\n        path: /actuator/health/liveness\n        port: 8080\n     initialDelaySeconds: 30\n     periodSeconds: 30\n")),(0,i.kt)("h1",{id:"logging"},"Logging"),(0,i.kt)("p",null,"Tasklist uses Log4j2 framework for logging. In distribution archive as well as inside a Docker image ",(0,i.kt)("inlineCode",{parentName:"p"},"config/log4j2.xml")," logging configuration files is included,\nthat can be further adjusted to your needs:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<Configuration status="WARN" monitorInterval="30">\n  <Properties>\n    <Property name="LOG_PATTERN">%clr{%d{yyyy-MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{${sys:PID}}{magenta} %clr{---}{faint} %clr{[%15.15t]}{faint} %clr{%-40.40c{1.}}{cyan} %clr{:}{faint} %m%n%xwEx</Property>\n  </Properties>\n  <Appenders>\n    <Console name="Console" target="SYSTEM_OUT" follow="true">\n      <PatternLayout pattern="${LOG_PATTERN}"/>\n    </Console>\n    <Console name="Stackdriver" target="SYSTEM_OUT" follow="true">\n      <StackdriverJSONLayout/>\n    </Console>\n  </Appenders>\n  <Loggers>\n    <Logger name="io.zeebe.tasklist" level="info" />\n    <Root level="info">\n      <AppenderRef ref="${env:TASKLIST_LOG_APPENDER:-Console}"/>\n    </Root>\n  </Loggers>\n</Configuration>\n')),(0,i.kt)("p",null,"By default Console log appender will be used."),(0,i.kt)("h3",{id:"json-logging-configuration"},"JSON logging configuration"),(0,i.kt)("p",null,"You can choose to output logs in JSON format (Stackdriver compatible). To enable it, define\nthe environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"TASKLIST_LOG_APPENDER")," like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sh"},"TASKLIST_LOG_APPENDER=Stackdriver\n")),(0,i.kt)("h1",{id:"an-example-of-applicationyml-file"},"An example of application.yml file"),(0,i.kt)("p",null,"The following snippet represents the default Tasklist configuration, which is shipped with the distribution. It can be found inside the ",(0,i.kt)("inlineCode",{parentName:"p"},"config")," folder (",(0,i.kt)("inlineCode",{parentName:"p"},"config/application.yml"),")\nand can be used to adjust Tasklist to your needs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"# Tasklist configuration file\n\nzeebe.tasklist:\n  # Set Tasklist username and password.\n  # If user with <username> does not exists it will be created.\n  # Default: demo/demo\n  #username:\n  #password:\n  # ELS instance to store Tasklist data\n  elasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Url\n    url: http://localhost:9200\n  # Zeebe instance\n  zeebe:\n    # Broker contact point\n    brokerContactPoint: localhost:26500\n  # ELS instance to export Zeebe data to\n  zeebeElasticsearch:\n    # Cluster name\n    clusterName: elasticsearch\n    # Url\n    url: http://localhost:9200\n    # Index prefix, configured in Zeebe Elasticsearch exporter\n    prefix: zeebe-record\n")))}u.isMDXComponent=!0}}]);