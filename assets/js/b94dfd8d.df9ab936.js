(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[35349],{3905:function(e,n,o){"use strict";o.d(n,{Zo:function(){return u},kt:function(){return s}});var t=o(67294);function r(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function i(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?i(Object(o),!0).forEach((function(n){r(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function l(e,n){if(null==e)return{};var o,t,r=function(e,n){if(null==e)return{};var o,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||(r[o]=e[o]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)o=i[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var g=t.createContext({}),c=function(e){var n=t.useContext(g),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},u=function(e){var n=c(e.components);return t.createElement(g.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var o=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(o),s=r,m=p["".concat(g,".").concat(s)]||p[s]||d[s]||i;return o?t.createElement(m,a(a({ref:n},u),{},{components:o})):t.createElement(m,a({ref:n},u))}));function s(e,n){var o=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=o.length,a=new Array(i);a[0]=p;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var c=2;c<i;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}p.displayName="MDXCreateElement"},31894:function(e,n,o){"use strict";o.r(n),o.d(n,{frontMatter:function(){return a},contentTitle:function(){return l},metadata:function(){return g},toc:function(){return c},default:function(){return d}});var t=o(22122),r=o(19756),i=(o(67294),o(3905)),a={id:"logging",title:"Logging"},l=void 0,g={unversionedId:"product-manuals/zeebe/deployment-guide/configuration/logging",id:"version-1.0/product-manuals/zeebe/deployment-guide/configuration/logging",isDocsHomePage:!1,title:"Logging",description:"Zeebe uses Log4j2 framework for logging. In the distribution and the docker image you can find the default log configuration file in config/log4j2.xml.",source:"@site/versioned_docs/version-1.0/product-manuals/zeebe/deployment-guide/configuration/logging.md",sourceDirName:"product-manuals/zeebe/deployment-guide/configuration",slug:"/product-manuals/zeebe/deployment-guide/configuration/logging",permalink:"/docs/1.0/product-manuals/zeebe/deployment-guide/configuration/logging",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-1.0/product-manuals/zeebe/deployment-guide/configuration/logging.md",version:"1.0",frontMatter:{id:"logging",title:"Logging"},sidebar:"version-1.0/Product Manuals",previous:{title:"Overview",permalink:"/docs/1.0/product-manuals/zeebe/deployment-guide/configuration/configuration"},next:{title:"Gateway health probes",permalink:"/docs/1.0/product-manuals/zeebe/deployment-guide/configuration/gateway-health-probes"}},c=[{value:"Google Stackdriver (JSON) logging",id:"google-stackdriver-json-logging",children:[]},{value:"Default logging configuration",id:"default-logging-configuration",children:[]},{value:"Change log level dynamically",id:"change-log-level-dynamically",children:[]}],u={toc:c};function d(e){var n=e.components,o=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,t.Z)({},u,o,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Zeebe uses Log4j2 framework for logging. In the distribution and the docker image you can find the default log configuration file in ",(0,i.kt)("inlineCode",{parentName:"p"},"config/log4j2.xml"),"."),(0,i.kt)("h2",{id:"google-stackdriver-json-logging"},"Google Stackdriver (JSON) logging"),(0,i.kt)("p",null,"To enable Google Stackdriver compatible JSON logging you can set the environment variable ",(0,i.kt)("inlineCode",{parentName:"p"},"ZEEBE_LOG_APPENDER=Stackdriver")," before starting Zeebe."),(0,i.kt)("h2",{id:"default-logging-configuration"},"Default logging configuration"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"config/log4j2.xml")," (applied by default)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<?xml version="1.0" encoding="UTF-8"?>\n<Configuration status="WARN" shutdownHook="disable">\n\n  <Properties>\n    <Property name="log.path">${sys:app.home}/logs</Property>\n    <Property name="log.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{actor-name}] [%t] %-5level %logger{36} - %msg%n</Property>\n    <Property name="log.stackdriver.serviceName">${env:ZEEBE_LOG_STACKDRIVER_SERVICENAME:-}</Property>\n    <Property name="log.stackdriver.serviceVersion">${env:ZEEBE_LOG_STACKDRIVER_SERVICEVERSION:-}</Property>\n  </Properties>\n\n  <Appenders>\n    <Console name="Console" target="SYSTEM_OUT">\n      <PatternLayout\n        pattern="${log.pattern}"/>\n    </Console>\n\n    <Console name="Stackdriver" target="SYSTEM_OUT">\n      <StackdriverLayout serviceName="${log.stackdriver.serviceName}"\n        serviceVersion="${log.stackdriver.serviceVersion}" />\n    </Console>\n\n    <RollingFile name="RollingFile" fileName="${log.path}/zeebe.log"\n      filePattern="${log.path}/zeebe-%d{yyyy-MM-dd}-%i.log.gz">\n      <PatternLayout>\n        <Pattern>${log.pattern}</Pattern>\n      </PatternLayout>\n      <Policies>\n        <TimeBasedTriggeringPolicy/>\n        <SizeBasedTriggeringPolicy size="250 MB"/>\n      </Policies>\n    </RollingFile>\n  </Appenders>\n\n  <Loggers>\n    <Logger name="io.camunda.zeebe" level="${env:ZEEBE_LOG_LEVEL:-info}"/>\n\n    <Logger name="io.atomix" level="${env:ATOMIX_LOG_LEVEL:-warn}"/>\n\n    <Root level="info">\n      <AppenderRef ref="RollingFile"/>\n\n      \x3c!-- remove to disable console logging --\x3e\n      <AppenderRef ref="${env:ZEEBE_LOG_APPENDER:-Console}"/>\n    </Root>\n  </Loggers>\n\n</Configuration>\n')),(0,i.kt)("h2",{id:"change-log-level-dynamically"},"Change log level dynamically"),(0,i.kt)("p",null,"Zeebe brokers expose a ",(0,i.kt)("a",{parentName:"p",href:"https://docs.spring.io/spring-boot/docs/current/actuator-api/html/#loggers"},"Spring Boot Actuators web endpoint"),"\nfor configuring loggers dynamically.\nTo change the log level of a logger make a ",(0,i.kt)("inlineCode",{parentName:"p"},"POST")," request to the ",(0,i.kt)("inlineCode",{parentName:"p"},"/actuator/loggers/{logger.name}")," endpoint as shown in the example below.\nChange ",(0,i.kt)("inlineCode",{parentName:"p"},"io.camunda.zeebe")," to the required logger name and ",(0,i.kt)("inlineCode",{parentName:"p"},"debug")," to required log level."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"curl 'http://localhost:9600/actuator/loggers/io.camunda.zeebe' -i -X POST -H 'Content-Type: application/json' -d '{\"configuredLevel\":\"debug\"}'\n")))}d.isMDXComponent=!0}}]);