(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[70879],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=r.createContext({}),p=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=p(e.components);return r.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(u,".").concat(m)]||d[m]||c[m]||a;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},72332:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return u},toc:function(){return p},default:function(){return c}});var r=n(22122),o=n(19756),a=(n(67294),n(3905)),i={id:"network-ports",title:"Network ports"},l=void 0,u={unversionedId:"product-manuals/zeebe/deployment-guide/operations/network-ports",id:"product-manuals/zeebe/deployment-guide/operations/network-ports",isDocsHomePage:!1,title:"Network ports",description:"The broker cluster sits behind the gRPC Gateway, which handles all requests from clients/workers and forwards events to brokers.",source:"@site/docs/product-manuals/zeebe/deployment-guide/operations/network-ports.md",sourceDirName:"product-manuals/zeebe/deployment-guide/operations",slug:"/product-manuals/zeebe/deployment-guide/operations/network-ports",permalink:"/docs/product-manuals/zeebe/deployment-guide/operations/network-ports",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/product-manuals/zeebe/deployment-guide/operations/network-ports.md",version:"current",frontMatter:{id:"network-ports",title:"Network ports"},sidebar:"Product Manuals",previous:{title:"Resource planning",permalink:"/docs/product-manuals/zeebe/deployment-guide/operations/resource-planning"},next:{title:"Setting up a Zeebe cluster",permalink:"/docs/product-manuals/zeebe/deployment-guide/operations/setting-up-a-cluster"}},p=[{value:"Gateway",id:"gateway",children:[]},{value:"Broker",id:"broker",children:[]}],s={toc:p};function c(e){var t=e.components,n=(0,o.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The broker cluster sits behind the gRPC Gateway, which handles all requests from clients/workers and forwards events to brokers."),(0,a.kt)("h2",{id:"gateway"},"Gateway"),(0,a.kt)("p",null,"The gateway needs to receive communication on"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zeebe.gateway.network.port: 26500")," from clients/workers, and"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zeebe.gateway.cluster.contactPoint: 127.0.0.1:26502")," from brokers")),(0,a.kt)("p",null,"The relevant ",(0,a.kt)("a",{parentName:"p",href:"/docs/product-manuals/zeebe/deployment-guide/configuration/configuration"},"configuration")," settings are:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Config file\n    zeebe:\n      gateway:\n        network:\n          port: 26500\n        cluster:\n          contactPoint: 127.0.0.1:26502\n\n\nEnvironment Variables\n  ZEEBE_GATEWAY_CLUSTER_NETWORK_PORT = 26500\n  ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT = 127.0.0.1:26502\n")),(0,a.kt)("h2",{id:"broker"},"Broker"),(0,a.kt)("p",null,"The broker needs to receive communication from the gateway and from other brokers. It also exposes a port for monitoring."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.commandApi.port: 26501"),": Gateway-to-broker communication, using an internal SBE (Simple Binary Encoding) protocol. This is the Command API port. This should be exposed to the gateway."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.internalApi.port: 26502"),": Inter-broker clustering using the Gossip and Raft protocols for partition replication, broker elections, topology sharing, and message subscriptions. This should be exposed to other brokers and the gateway."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.monitoringApi.port: 9600"),": Metrics and Readiness Probe. Prometheus metrics are exported on the route ",(0,a.kt)("inlineCode",{parentName:"li"},"/metrics"),". There is a readiness probe on ",(0,a.kt)("inlineCode",{parentName:"li"},"/ready"),".")),(0,a.kt)("p",null,"The relevant ",(0,a.kt)("a",{parentName:"p",href:"/docs/product-manuals/zeebe/deployment-guide/configuration/configuration"},"configuration")," settings are:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Config file\n    zeebe:\n      broker:\n        network:\n          commandAPI:\n            port: 26501\n          internalAPI:\n            port: 26502\n          monitoringApi\n            port: 9600\n\nEnvironment Variables\n  ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT = 26501\n  ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT = 26501\n  ZEEBE_BROKER_NETWORK_MONITOIRNGAPI_PORT = 26501\n")))}c.isMDXComponent=!0}}]);