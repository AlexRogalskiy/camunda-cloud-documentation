(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[89670],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return d},kt:function(){return u}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(p,".").concat(u)]||m[u]||l[u]||o;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49119:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return l}});var a=n(22122),r=n(19756),o=(n(67294),n(3905)),i={id:"create-process-instance",title:"Create and complete process instances"},s=void 0,p={unversionedId:"components/zeebe/deployment-guide/getting-started/create-process-instance",id:"components/zeebe/deployment-guide/getting-started/create-process-instance",isDocsHomePage:!1,title:"Create and complete process instances",description:"We're going to create two process instances for this tutorial: one with an order value less than $100, and one with an order value greater than or equal to $100 so we can see our XOR gateway in action.",source:"@site/docs/components/zeebe/deployment-guide/getting-started/create-process-instance.md",sourceDirName:"components/zeebe/deployment-guide/getting-started",slug:"/components/zeebe/deployment-guide/getting-started/create-process-instance",permalink:"/docs/components/zeebe/deployment-guide/getting-started/create-process-instance",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/components/zeebe/deployment-guide/getting-started/create-process-instance.md",version:"current",frontMatter:{id:"create-process-instance",title:"Create and complete process instances"},sidebar:"Components",previous:{title:"Deploy a process",permalink:"/docs/components/zeebe/deployment-guide/getting-started/deploy-a-process"},next:{title:"Next steps and resources",permalink:"/docs/components/zeebe/deployment-guide/getting-started/next-steps-resources"}},c=[],d={toc:c};function l(e){var t=e.components,i=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We're going to create two process instances for this tutorial: one with an order value less than $100, and one with an order value greater than or equal to $100 so we can see our XOR gateway in action."),(0,o.kt)("p",null,"Go back to the Terminal window where you deployed the process model and execute the following command:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," Windows users who want to execute this command using cmd or Powershell\nhave to escape the variables differently."),(0,o.kt)("ul",{parentName:"blockquote"},(0,o.kt)("li",{parentName:"ul"},"cmd: ",(0,o.kt)("inlineCode",{parentName:"li"},'"{\\"orderId\\": 1234}"')),(0,o.kt)("li",{parentName:"ul"},"Powershell: ",(0,o.kt)("inlineCode",{parentName:"li"},'\'{"\\"orderId"\\": 1234}\'')))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl --insecure create instance order-process --variables \'{"orderId": "1234", "orderValue":99}\'\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.darwin --insecure create instance order-process --variables \'{"orderId": "1234", "orderValue":99}\'\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Windows (Powershell)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure create instance order-process --variables \'{\\"orderId\\": \\"1234\\", \\\n"orderValue\\":99}\'\n')),(0,o.kt)("p",null,"You'll see a response similar to the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'{\n  "processKey": 1,\n  "bpmnProcessId": "order-process",\n  "version": 1,\n  "processInstanceKey": 8\n}\n')),(0,o.kt)("p",null,"This first process instance we just created represents a single customer order with ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId")," 1234 and ",(0,o.kt)("inlineCode",{parentName:"p"},"orderValue")," 99 (or, $99)."),(0,o.kt)("p",null,"In the same Terminal window, run the following command:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl --insecure create instance order-process --variables \'{"orderId": "2345", "orderValue":100}\'\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.darwin --insecure create instance order-process --variables \'{"orderId": "2345", "orderValue":100}\'\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Windows (Powershell)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure create instance order-process --variables \'{\\"orderId\\": \\"2345\\", \\\n"orderValue\\":100}\'\n')),(0,o.kt)("p",null,"This second process instance we just created represents a single customer order with ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId")," 2345 and ",(0,o.kt)("inlineCode",{parentName:"p"},"orderValue")," 100 (or, $100)."),(0,o.kt)("p",null,"If you go back to the Operate UI and refresh the page, you should now see two process instances (the green badge) waiting at the ",(0,o.kt)("inlineCode",{parentName:"p"},"Initiate Payment")," task."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Process Instances in Operate",src:n(76597).Z})),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The process instance can't move past this first task until we create a job worker to complete ",(0,o.kt)("inlineCode",{parentName:"p"},"initiate-payment")," jobs. This is what we'll do next."))),(0,o.kt)("p",null,"To reiterate: in a real-word use case, you probably won't manually create process instances using the Zeebe CLI. Rather, a process instance would be created programmatically in response to some business event, such as a message sent to Zeebe after a customer places an order. Instances might be created at very large scale if, for example, many customers were placing orders at the same time due to a sale. We're using the CLI here just for simplicity's sake."),(0,o.kt)("p",null,"We have two instances currently waiting at our ",(0,o.kt)("inlineCode",{parentName:"p"},"Initiate Payment")," task, which means Zeebe created two jobs with type ",(0,o.kt)("inlineCode",{parentName:"p"},"initiate-payment"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"zbctl")," provides a command to spawn simple job workers using an external command or script. The job worker receives the payload for every job as a JSON object on ",(0,o.kt)("inlineCode",{parentName:"p"},"stdin")," and must also return its result as JSON object on ",(0,o.kt)("inlineCode",{parentName:"p"},"stdout")," if it handled the job successfully."),(0,o.kt)("p",null,"In this example, we'll also use the unix command ",(0,o.kt)("inlineCode",{parentName:"p"},"cat"),", which simply outputs what it receives on ",(0,o.kt)("inlineCode",{parentName:"p"},"stdin"),"."),(0,o.kt)("p",null,"Open a new Terminal tab or window, change into the Zeebe broker directory, and use the following command to create a job worker that will work on the ",(0,o.kt)("inlineCode",{parentName:"p"},"initiate-payment")," job."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"For Windows users, this command does not work with cmd as the ",(0,o.kt)("inlineCode",{parentName:"p"},"cat")," command does not exist. We recommend using Powershell or a bash-like shell to execute this command."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl --insecure create worker initiate-payment --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl.darwin --insecure create worker initiate-payment --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Windows")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure create worker initiate-payment --handler "findstr .*"\n')),(0,o.kt)("p",{parentName:"div"},"You should see a response similar to the following:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'Activated job 12 with payload {"orderId":"2345","orderValue":100}\nActivated job 7 with payload {"orderId":"1234","orderValue":99}\nHandler completed job 12 with payload {"orderId":"2345","orderValue":100}\nHandler completed job 7 with payload {"orderId":"1234","orderValue":99}\n')),(0,o.kt)("p",{parentName:"div"},"We can see the job worker activated and completed the two available ",(0,o.kt)("inlineCode",{parentName:"p"},"initiate-payment")," jobs. You can shut down the job worker if you'd like\u2014you won't need it in the remainder of the tutorial."),(0,o.kt)("p",{parentName:"div"},"Next, go to the browser tab where you're running Operate. You should see the process instances have advanced to the intermediate message catch event and are waiting there."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{alt:"Waiting at Message Event",src:n(66545).Z})),(0,o.kt)("p",{parentName:"div"},"The process instances will wait at the intermediate message catch event until a message is received by Zeebe and correlated to the instances. Messages can be published using Zeebe clients, and it's also possible for Zeebe to connect to a message queue such as Apache Kafka and correlate messages published there to process instances."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("inlineCode",{parentName:"p"},"zbctl")," also supports message publishing, so we'll continue to use it in our demo. Below is the command we'll use to publish and correlate a message. You'll see that we provide the message \"Name\" that we assigned to this message event in Camunda Modeler as well as the ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId")," that we included in the payload of the instance when we created it."),(0,o.kt)("p",{parentName:"div"},"Remember, ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId")," is the correlation key we set in the Modeler when configuring the message event. Zeebe requires both of these fields to correlate a message to a process instance. Because we have two process instances with two distinct ",(0,o.kt)("inlineCode",{parentName:"p"},"orderId"),", we'll need to publish two messages. Run these two commands one after the other:"),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl --insecure publish message "payment-received" --correlationKey="1234"\n./bin/zbctl --insecure publish message "payment-received" --correlationKey="2345"\n')),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.darwin --insecure publish message "payment-received" --correlationKey="1234"\n./bin/zbctl.darwin --insecure publish message "payment-received" --correlationKey="2345"\n')),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Windows")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure publish message "payment-received" --correlationKey="1234"\n./bin/zbctl.exe --insecure publish message "payment-received" --correlationKey="2345"\n')),(0,o.kt)("p",{parentName:"div"},"You won't see a response in your Terminal window, but if you refresh Operate, you should see the messages correlated successfully and one process instance advanced to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ship With Insurance")," task and the other advanced to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ship Without Insurance")," task."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{alt:"Waiting at Shipping Service Tasks",src:n(34023).Z})),(0,o.kt)("p",{parentName:"div"},"The good news is that this visualization confirms that our decision logic worked as expected: our process instance with an ",(0,o.kt)("inlineCode",{parentName:"p"},"orderValue")," of $100 will ship with insurance, and our process instance with an ",(0,o.kt)("inlineCode",{parentName:"p"},"orderValue")," of $99 will ship without insurance."),(0,o.kt)("p",{parentName:"div"},"Next, open a Terminal window and create a job worker for the ",(0,o.kt)("inlineCode",{parentName:"p"},"ship-without-insurance")," job type."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl --insecure create worker ship-without-insurance --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl.darwin --insecure create worker ship-without-insurance --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Windows")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure create worker ship-without-insurance --handler "findstr .*"\n')),(0,o.kt)("p",{parentName:"div"},"You should see a response similar to the following:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'Activated job 529 with payload {"orderId":"1234","orderValue":99}\nHandler completed job 529 with payload {"orderId":"1234","orderValue":99}\n')),(0,o.kt)("p",{parentName:"div"},"You can shut down this worker now."),(0,o.kt)("p",{parentName:"div"},"Select the ",(0,o.kt)("strong",{parentName:"p"},"Finished Instances")," checkbox in the bottom left of Operate, refresh the page, and voila! You'll see your first completed Zeebe process instance."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{alt:"First Process Instance Complete",src:n(76870).Z})),(0,o.kt)("p",{parentName:"div"},"Because the ",(0,o.kt)("inlineCode",{parentName:"p"},"Ship With Insurance")," task has a different job type, we need to create a second worker that can take on this job."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Linux")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl --insecure create worker ship-with-insurance --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Mac")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},"./bin/zbctl.darwin --insecure create worker ship-with-insurance --handler cat\n")),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("strong",{parentName:"p"},"Windows")),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'./bin/zbctl.exe --insecure create worker ship-with-insurance --handler "findstr .*"\n')),(0,o.kt)("p",{parentName:"div"},"You should see a response similar to the following:"),(0,o.kt)("pre",{parentName:"div"},(0,o.kt)("code",{parentName:"pre"},'Activated job 535 with payload {"orderId":"2345","orderValue":100}\nHandler completed job 535 with payload {"orderId":"2345","orderValue":100}\n')),(0,o.kt)("p",{parentName:"div"},"You can shut down this worker, too."),(0,o.kt)("p",{parentName:"div"},"Let's take one more look in Operate to confirm both process instances completed."),(0,o.kt)("p",{parentName:"div"},(0,o.kt)("img",{alt:"Both Process Instances Complete",src:n(51212).Z})),(0,o.kt)("p",{parentName:"div"},"Hooray! You've completed the tutorial! Congratulations."),(0,o.kt)("p",{parentName:"div"},"In the next and final section, we'll point you to resources we think you'll find helpful as you continue working with Zeebe."))))}l.isMDXComponent=!0},76597:function(e,t,n){"use strict";t.Z=n.p+"assets/images/tutorial-4.1-process-instances-first-task-841953c36c351b67571845b295834ccb.png"},66545:function(e,t,n){"use strict";t.Z=n.p+"assets/images/tutorial-4.2-waiting-at-message-c6cd59ca77c0bb08b1d2e1e09e90333a.png"},34023:function(e,t,n){"use strict";t.Z=n.p+"assets/images/tutorial-4.3-waiting-at-shipping-122de9a0ed4d37efcefaeb564e146ddd.png"},76870:function(e,t,n){"use strict";t.Z=n.p+"assets/images/tutorial-4.4-no-insurance-complete-0854e12f195c8c914f952d7d139aac22.png"},51212:function(e,t,n){"use strict";t.Z=n.p+"assets/images/tutorial-4.5-both-instances-complete-45628cee77108b5d8f39d611cf0ee01c.png"}}]);