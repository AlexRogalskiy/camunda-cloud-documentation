(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[37129],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return h}});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=s.createContext({}),p=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=p(e.components);return s.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},l=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),l=p(n),h=a,u=l["".concat(c,".").concat(h)]||l[h]||d[h]||r;return n?s.createElement(u,o(o({ref:t},m),{},{components:n})):s.createElement(u,o({ref:t},m))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=l;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}l.displayName="MDXCreateElement"},63183:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var s=n(22122),a=n(19756),r=(n(67294),n(3905)),o={id:"message-events",title:"Message events"},i=void 0,c={unversionedId:"reference/bpmn-processes/message-events/message-events",id:"reference/bpmn-processes/message-events/message-events",isDocsHomePage:!1,title:"Message events",description:"Message events are events which reference a message; they are used to wait until a proper message is received.",source:"@site/docs/reference/bpmn-processes/message-events/message-events.md",sourceDirName:"reference/bpmn-processes/message-events",slug:"/reference/bpmn-processes/message-events/message-events",permalink:"/docs/reference/bpmn-processes/message-events/message-events",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/reference/bpmn-processes/message-events/message-events.md",version:"current",frontMatter:{id:"message-events",title:"Message events"},sidebar:"Reference",previous:{title:"None events",permalink:"/docs/reference/bpmn-processes/none-events/none-events"},next:{title:"Timer events",permalink:"/docs/reference/bpmn-processes/timer-events/timer-events"}},p=[{value:"Message start events",id:"message-start-events",children:[]},{value:"Intermediate message catch events",id:"intermediate-message-catch-events",children:[]},{value:"Message boundary events",id:"message-boundary-events",children:[]},{value:"Message throw events",id:"message-throw-events",children:[]},{value:"Messages",id:"messages",children:[]},{value:"Variable mappings",id:"variable-mappings",children:[]},{value:"Additional resources",id:"additional-resources",children:[{value:"XML representation",id:"xml-representation",children:[]},{value:"References",id:"references",children:[]}]}],m={toc:p};function d(e){var t=e.components,o=(0,a.Z)(e,["components"]);return(0,r.kt)("wrapper",(0,s.Z)({},m,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Message events are events which reference a message; they are used to wait until a proper message is received."),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"process",src:n(82310).Z})),(0,r.kt)("h2",{id:"message-start-events"},"Message start events"),(0,r.kt)("p",null,"A process can have one or more message start events (besides other types of start events). Each of the message events must have a unique message name."),(0,r.kt)("p",null,"When a process is deployed, it creates a message subscription for each message start event. Message subscriptions of the previous version of the process (based on the BPMN process id) are closed."),(0,r.kt)("p",null,"When the message subscription is created, a message can be correlated to the start event if the message name matches. On correlating the message, a new process instance is created and the corresponding message start event is activated."),(0,r.kt)("p",null,"Messages are ",(0,r.kt)("strong",{parentName:"p"},"not")," correlated if they were published before the process was deployed or if a new version of the process is deployed without a proper start event."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," of a published message can be used to control the process instance creation. If an instance of this process is active (independently from its version) and it was triggered by a message with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey"),", the message is ",(0,r.kt)("strong",{parentName:"p"},"not")," correlated and no new instance is created."),(0,r.kt)("p",null,"When the active process instance is completed or terminated and a message with the same ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," and a matching message name is buffered (i.e. TTL > 0), this message is correlated and a new instance of the latest version of the process is created."),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," of a message is empty, it creates a new process instance and does not check if an instance is already active."),(0,r.kt)("h2",{id:"intermediate-message-catch-events"},"Intermediate message catch events"),(0,r.kt)("p",null,"When an intermediate message catch event is entered, a corresponding message subscription is created. The process instance stops at this point and waits until the message is correlated. When a message is correlated, the catch event is completed and the process instance continues."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"An alternative to intermediate message catch events are ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/bpmn-processes/receive-tasks/receive-tasks"},"receive tasks"),", which behaves the same but can be used together with boundary events."))),(0,r.kt)("h2",{id:"message-boundary-events"},"Message boundary events"),(0,r.kt)("p",null,"An activity can have one or more message boundary events. Each of the message events must have a unique message name."),(0,r.kt)("p",null,"When the activity is entered, it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered, the activity is not terminated and multiple messages can be correlated."),(0,r.kt)("h2",{id:"message-throw-events"},"Message throw events"),(0,r.kt)("p",null,"A process can contain intermediate message throw events or message end events to model the\npublication of a message to an external system, for example, to a Kafka topic."),(0,r.kt)("p",null,"At the moment, intermediate message throw events and message end events behave exactly\nlike ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/bpmn-processes/service-tasks/service-tasks"},"service tasks")," or ",(0,r.kt)("a",{parentName:"p",href:"/docs/reference/bpmn-processes/send-tasks/send-tasks"},"send tasks"),"\n, and have the same job-related properties (e.g. job type, custom headers, etc.). The message throw\nevents and the tasks are based on jobs\nand ",(0,r.kt)("a",{parentName:"p",href:"/docs/components/concepts/job-workers"},"job workers"),". The differences between the message\nthrow events and the tasks are the visual representation and the semantics for the model. Read more\nabout the job properties ",(0,r.kt)("a",{parentName:"p",href:"/docs/components/concepts/job-workers"},"here"),"."),(0,r.kt)("p",null,"When a process instance enters a message throw event, it creates a corresponding job and waits for\nits completion. A job worker should request jobs of this job type and process them. When the job is\ncomplete, the process instance continues or completes if it is a message end event."),(0,r.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Message throw events are not processed by Zeebe itself (i.e. to correlate a message to a message\ncatch event). Instead, it creates jobs with the defined job type. To process them, provide a job\nworker."))),(0,r.kt)("h2",{id:"messages"},"Messages"),(0,r.kt)("p",null,"A message can be referenced by one or more message events. It must define the name of the message (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Money collected"),") and the ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," expression (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"= orderId"),"). If the message is only referenced by message start events, the ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," is not required."),(0,r.kt)("p",null,"Usually, the name of the message is defined as a static value (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"order canceled"),"), but it can also be defined as ",(0,r.kt)("a",{parentName:"p",href:"/docs/components/concepts/expressions"},"expression")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},'= "order " + awaitingAction'),"). If the expression belongs to a message start event of the process, it is evaluated on deploying the process. Otherwise, it is evaluated on activating the message event. The evaluation must result in a ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," is an expression that usually ",(0,r.kt)("a",{parentName:"p",href:"/docs/components/concepts/expressions#access-variables"},"accesses a variable")," of the process instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a ",(0,r.kt)("inlineCode",{parentName:"p"},"string")," or in a ",(0,r.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,r.kt)("p",null,"To correlate a message to the message event, the message is published with the defined name (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"Money collected"),") and the ",(0,r.kt)("strong",{parentName:"p"},"value")," of the ",(0,r.kt)("inlineCode",{parentName:"p"},"correlationKey")," expression. For example, if the process instance has a variable ",(0,r.kt)("inlineCode",{parentName:"p"},"orderId")," with value ",(0,r.kt)("inlineCode",{parentName:"p"},'"order-123"'),", the message must be published with the correlation key ",(0,r.kt)("inlineCode",{parentName:"p"},'"order-123"'),"."),(0,r.kt)("h2",{id:"variable-mappings"},"Variable mappings"),(0,r.kt)("p",null,"By default, all message variables are merged into the process instance. This behavior can be customized by defining an output mapping at the message catch event."),(0,r.kt)("h2",{id:"additional-resources"},"Additional resources"),(0,r.kt)("h3",{id:"xml-representation"},"XML representation"),(0,r.kt)("p",null,"A message start event with message definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<bpmn:message id="Message_0z0aft4" name="order-placed" />\n\n<bpmn:startEvent id="order-placed" name="Order placed">\n  <bpmn:messageEventDefinition messageRef="Message_0z0aft4" />\n</bpmn:startEvent>\n')),(0,r.kt)("p",null,"An intermediate message catch event with message definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<bpmn:message id="Message_1iz5qtq" name="money-collected">\n  <bpmn:extensionElements>\n    <zeebe:subscription correlationKey="= orderId" />\n  </bpmn:extensionElements>\n</bpmn:message>\n\n<bpmn:intermediateCatchEvent id="money-collected" name="Money collected" >\n  <bpmn:messageEventDefinition messageRef="Message_1iz5qtq" />\n</bpmn:intermediateCatchEvent>\n')),(0,r.kt)("p",null,"A boundary message event:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'<bpmn:boundaryEvent id="order-canceled" name="Order Canceled"\n  attachedToRef="collect-money">\n  <bpmn:messageEventDefinition messageRef="Message_1iz5qtq" />\n</bpmn:boundaryEvent>\n')),(0,r.kt)("h3",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/components/concepts/messages"},"Message correlation")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/components/concepts/expressions"},"Expressions")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/components/concepts/variables#inputoutput-variable-mappings"},"Variable mappings")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/components/concepts/incidents"},"Incidents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/components/concepts/job-workers"},"Job handling"))))}d.isMDXComponent=!0},82310:function(e,t,n){"use strict";t.Z=n.p+"assets/images/message-events-d96d0c0ac4f73542e0ad13f64746a83e.png"}}]);