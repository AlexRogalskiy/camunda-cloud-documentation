(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[18976],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),l=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(p.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(t),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return t?r.createElement(f,a(a({ref:n},c),{},{components:t})):r.createElement(f,a({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},48849:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return u}});var r=t(22122),o=t(19756),i=(t(67294),t(3905)),a={id:"network-ports",title:"Network ports"},s=void 0,p={unversionedId:"components/zeebe/deployment-guide/operations/network-ports",id:"version-0.26/components/zeebe/deployment-guide/operations/network-ports",isDocsHomePage:!1,title:"Network ports",description:"The broker cluster sits behind the gRPC Gateway, which handles all requests from clients/workers and forwards events to brokers.",source:"@site/versioned_docs/version-0.26/components/zeebe/deployment-guide/operations/network-ports.md",sourceDirName:"components/zeebe/deployment-guide/operations",slug:"/components/zeebe/deployment-guide/operations/network-ports",permalink:"/docs/0.26/components/zeebe/deployment-guide/operations/network-ports",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.26/components/zeebe/deployment-guide/operations/network-ports.md",version:"0.26",frontMatter:{id:"network-ports",title:"Network ports"},sidebar:"version-0.26/Components",previous:{title:"Resource planning",permalink:"/docs/0.26/components/zeebe/deployment-guide/operations/resource-planning"},next:{title:"Setting up a Zeebe cluster",permalink:"/docs/0.26/components/zeebe/deployment-guide/operations/setting-up-a-cluster"}},l=[{value:"Gateway",id:"gateway",children:[]},{value:"Broker",id:"broker",children:[]}],c={toc:l};function u(e){var n=e.components,t=(0,o.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The broker cluster sits behind the gRPC Gateway, which handles all requests from clients/workers and forwards events to brokers."),(0,i.kt)("h2",{id:"gateway"},"Gateway"),(0,i.kt)("p",null,"The gateway needs to receive communication on"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe.gateway.network.port: 26500")," from clients/workers, and"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe.gateway.cluster.contactPoint: 127.0.0.1:26502")," from brokers")),(0,i.kt)("p",null,"The relevant ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.26/components/zeebe/deployment-guide/configuration/configuration"},"configuration")," settings are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Config file\n    zeebe:\n      gateway:\n        network:\n          port: 26500\n        cluster:\n          contactPoint: 127.0.0.1:26502\n\n\nEnvironment Variables\n  ZEEBE_GATEWAY_CLUSTER_NETWORK_PORT = 26500\n  ZEEBE_GATEWAY_CLUSTER_CONTACTPOINT = 127.0.0.1:26502\n")),(0,i.kt)("h2",{id:"broker"},"Broker"),(0,i.kt)("p",null,"The broker needs to receive communication from the gateway and from other brokers. It also exposes a port for monitoring."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.commandApi.port: 26501"),": Gateway-to-broker communication, using an internal SBE (Simple Binary Encoding) protocol. This is the Command API port. This should be exposed to the gateway."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.internalApi.port: 26502"),": Inter-broker clustering using the Gossip and Raft protocols for partition replication, broker elections, topology sharing, and message subscriptions. This should be exposed to other brokers and the gateway."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe.broker.network.monitoringApi.port: 9600"),": Metrics and Readiness Probe. Prometheus metrics are exported on the route ",(0,i.kt)("inlineCode",{parentName:"li"},"/metrics"),". There is a readiness probe on ",(0,i.kt)("inlineCode",{parentName:"li"},"/ready"),".")),(0,i.kt)("p",null,"The relevant ",(0,i.kt)("a",{parentName:"p",href:"/docs/0.26/components/zeebe/deployment-guide/configuration/configuration"},"configuration")," settings are:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"Config file\n    zeebe:\n      broker:\n        network:\n          commandAPI:\n            port: 26501\n          internalAPI:\n            port: 26502\n          monitoringApi\n            port: 9600\n\nEnvironment Variables\n  ZEEBE_BROKER_NETWORK_COMMANDAPI_PORT = 26501\n  ZEEBE_BROKER_NETWORK_INTERNALAPI_PORT = 26501\n  ZEEBE_BROKER_NETWORK_MONITOIRNGAPI_PORT = 26501\n")))}u.isMDXComponent=!0}}]);