(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[44195],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),d=a,h=p["".concat(l,".").concat(d)]||p[d]||m[d]||i;return n?r.createElement(h,o(o({ref:t},u),{},{components:n})):r.createElement(h,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2981:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var r=n(22122),a=n(19756),i=(n(67294),n(3905)),o={id:"backpressure",title:"Backpressure",description:"This document outlines an overview of backpressure and its accompanying assets."},s=void 0,l={unversionedId:"components/zeebe/deployment-guide/operations/backpressure",id:"components/zeebe/deployment-guide/operations/backpressure",isDocsHomePage:!1,title:"Backpressure",description:"This document outlines an overview of backpressure and its accompanying assets.",source:"@site/docs/components/zeebe/deployment-guide/operations/backpressure.md",sourceDirName:"components/zeebe/deployment-guide/operations",slug:"/components/zeebe/deployment-guide/operations/backpressure",permalink:"/docs/components/zeebe/deployment-guide/operations/backpressure",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/components/zeebe/deployment-guide/operations/backpressure.md",version:"current",frontMatter:{id:"backpressure",title:"Backpressure",description:"This document outlines an overview of backpressure and its accompanying assets."},sidebar:"Components",previous:{title:"Health status",permalink:"/docs/components/zeebe/deployment-guide/operations/health"},next:{title:"Disk space",permalink:"/docs/components/zeebe/deployment-guide/operations/disk-space"}},c=[{value:"Terminology",id:"terminology",children:[]},{value:"Backpressure algorithms",id:"backpressure-algorithms",children:[]},{value:"Gradient",id:"gradient",children:[]},{value:"Gradient2",id:"gradient2",children:[]},{value:"Backpressure tuning",id:"backpressure-tuning",children:[]},{value:"Potential issues",id:"potential-issues",children:[]}],u={toc:c};function m(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When a broker receives a client request, it is written to the ",(0,i.kt)("em",{parentName:"p"},"event stream")," first (see section ",(0,i.kt)("a",{parentName:"p",href:"/docs/components/zeebe/technical-concepts/internal-processing"},"Internal processing")," for details), and processed later by the stream processor.\nIf the processing is slow or if there are many client requests in the stream, it might take too long for the processor to start processing the command.\nIf the broker keeps accepting new requests from the client, the back log increases and the processing latency can grow beyond an acceptable time."),(0,i.kt)("p",null,"To avoid such problems, Zeebe employs a backpressure mechanism. When the broker receives more requests than it can process with an acceptable latency, it rejects some requests (see ",(0,i.kt)("a",{parentName:"p",href:"/docs/reference/grpc#technical-error-handling"},"technical error handling"),")."),(0,i.kt)("h3",{id:"terminology"},"Terminology"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"RTT")," - The time between when the request is accepted by the broker and when the response to the request is sent back to the gateway."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"inflight count")," - The number of requests accepted by the broker but the response is not yet sent."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"limit")," - Maximum number of flight requests. When the inflight count is above the limit, any new incoming request is rejected.")),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The limit and inflight count are calculated per partition."))),(0,i.kt)("h3",{id:"backpressure-algorithms"},"Backpressure algorithms"),(0,i.kt)("p",null,"Zeebe uses adaptive algorithms from ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/Netflix/concurrency-limits"},"concurrency-limits")," to dynamically calculate the limit.\nConfigure Zeebe with one of the backpressure algorithms in the following sections."),(0,i.kt)("h4",{id:"fixed-limit"},"Fixed limit"),(0,i.kt)("p",null,"With ",(0,i.kt)("strong",{parentName:"p"},"fixed limit"),", one can configure a fixed value of the limit.\nZeebe operators are recommended to evaluate the latencies observed with different values for limit.\nNote that with different cluster configurations, you may have to choose different limit values."),(0,i.kt)("h4",{id:"aimd"},"AIMD"),(0,i.kt)("p",null,"AIMD calculates the limit based on the configured ",(0,i.kt)("em",{parentName:"p"},"requestTimeout"),".\nWhen the RTT for a request ",(0,i.kt)("em",{parentName:"p"},"requestTimeout"),", the limit is increased by 1.\nWhen the RTT is longer than ",(0,i.kt)("em",{parentName:"p"},"requestTimeout"),",\nthe limit will be reduced according to the configured ",(0,i.kt)("em",{parentName:"p"},"backoffRatio"),"."),(0,i.kt)("h4",{id:"vegas"},"Vegas"),(0,i.kt)("p",null,"Vegas is an adaptive limit algorithm based on TCP Vegas congestion control algorithm.\nVegas estimates a base latency as the minimum observed latency.\nThis base RTT is the expected latency when there is no load.\nWhenever the RTT deviates from the base RTT, a new limit is calculated based on the vegas algorithm.\nVegas allows to configure two parameters - ",(0,i.kt)("em",{parentName:"p"},"alpha")," and ",(0,i.kt)("em",{parentName:"p"},"beta"),".\nThe values correspond to a queue size estimated by the Vegas algorithm based on the observed RTT, base RTT, and current limit.\nWhen the queue size is below ",(0,i.kt)("em",{parentName:"p"},"alpha"),", the limit is increased.\nWhen the queue size is above ",(0,i.kt)("em",{parentName:"p"},"beta"),", the limit is decreased."),(0,i.kt)("h3",{id:"gradient"},"Gradient"),(0,i.kt)("p",null,"Gradient is an adaptive limit algorithm that dynamically calculates the limit based on observed RTT.\nIn the gradient algorithm, the limit is adjusted based on the gradient of observed RTT and an observed minimum RTT.\nIf gradient is less than 1, the limit is decreased otherwise the limit is increased."),(0,i.kt)("h3",{id:"gradient2"},"Gradient2"),(0,i.kt)("p",null,"Gradient2 is similar to Gradient, but instead of using observed minimum RTT as the base, it uses an exponentially smoothed average RTT."),(0,i.kt)("h2",{id:"backpressure-tuning"},"Backpressure tuning"),(0,i.kt)("p",null,"The goal of backpressure is to keep the processing latency low.\nThe processing latency is calculated as the time between the command is written to the event stream until it is processed.\nTo see how backpressure behaves, run a benchmark on your cluster and observe the following metrics:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe_stream_processor_latency_bucket")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe_dropped_request_count_total")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe_received_request_count_total")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"zeebe_backpressure_requests_limit"))),(0,i.kt)("p",null,"You may want to run the benchmark with different loads:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"With low load - Where the number of requests sent per second is low."),(0,i.kt)("li",{parentName:"ol"},"With high load - Where the number of requests sent per second is above what Zeebe can process within a reasonable latency.")),(0,i.kt)("p",null,"If the value of the limit is small, the processing latency will be small, but the number of rejected requests may be high.\nIf the value of the limit is large, less requests may be rejected (depending on the request rate),\nbut the processing latency may increase."),(0,i.kt)("p",null,"When using ",(0,i.kt)("strong",{parentName:"p"},"fixed limit"),", you can run the benchmark with different values for the limit.\nYou can then determine a suitable value for a limit for which the processing latency (",(0,i.kt)("inlineCode",{parentName:"p"},"zeebe_stream_processor_latency_bucket"),") is within the desired latency."),(0,i.kt)("p",null,"When using ",(0,i.kt)("strong",{parentName:"p"},"AIMD"),", you can configure a ",(0,i.kt)("inlineCode",{parentName:"p"},"requestTimeout")," which corresponds to a desired latency.\nNote that during high load, AIMD can lead to a processing latency two times more than the configured ",(0,i.kt)("inlineCode",{parentName:"p"},"requestTimeout"),".\nIt is also recommended to configure a ",(0,i.kt)("inlineCode",{parentName:"p"},"minLimit")," to prevent the limit from aggressively dropping during constant high load."),(0,i.kt)("p",null,"When using ",(0,i.kt)("strong",{parentName:"p"},"Vegas"),", you cannot configure the backpressure to a desired latency.\nInstead, Vegas tries to keep the RTT as low as possible based on the observed minimum RTT."),(0,i.kt)("p",null,"Similar to Vegas, you cannot configure the desired latency in Gradient and Gradient2.\nThey calculated the limit based on the gradient of observed RTT from the expected RTT.\nThe higher the value of ",(0,i.kt)("em",{parentName:"p"},"rttTolerance"),", the higher deviations are tolerated that results in higher values for limit."),(0,i.kt)("p",null,"If a lot of requests are rejected due to backpressure, it might indicate that the processing capacity of the cluster is not enough to handle the expected throughput.\nIf this is the expected workload, you might consider a different configuration for the cluster, such as provisioning more resources and increasing the number of nodes and partitions."),(0,i.kt)("h2",{id:"potential-issues"},"Potential issues"),(0,i.kt)("p",null,"The rate limiter used by Zeebe to implement backpressure may use ",(0,i.kt)("inlineCode",{parentName:"p"},"System.nanoTime()")," to measure the RTT of requests. In some systems, we've observed consecutive calls to this method can return equal or even decreasing values. ",(0,i.kt)("a",{parentName:"p",href:"https://shipilev.net/blog/2014/nanotrusting-nanotime"},"Low clock resolution")," and ",(0,i.kt)("a",{parentName:"p",href:"https://bugs.openjdk.java.net/browse/JDK-6458294"},"monotonicity")," ",(0,i.kt)("a",{parentName:"p",href:"https://stackoverflow.com/questions/3657289/linux-clock-gettimeclock-monotonic-strange-non-monotonic-behavior"},"issues")," are some of the most likely culprits of this. If this happens, it's recommended to configure the backpressure to use the ",(0,i.kt)("strong",{parentName:"p"},"fixed")," algorithm. Without a clock with sufficient resolution, adaptive backpressure algorithms are not useful."))}m.isMDXComponent=!0}}]);