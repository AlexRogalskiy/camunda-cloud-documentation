(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[39078],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return h}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=c(n),h=r,k=d["".concat(s,".").concat(h)]||d[h]||p[h]||a;return n?o.createElement(k,i(i({ref:t},u),{},{components:n})):o.createElement(k,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},13285:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return c},default:function(){return p}});var o=n(22122),r=n(19756),a=(n(67294),n(3905)),i={id:"glossary",title:"Glossary"},l=void 0,s={unversionedId:"reference/glossary",id:"version-0.26/reference/glossary",isDocsHomePage:!1,title:"Glossary",description:"This section defines commonly used terminology referenced within the documentation.",source:"@site/versioned_docs/version-0.26/reference/glossary.md",sourceDirName:"reference",slug:"/reference/glossary",permalink:"/docs/0.26/reference/glossary",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.26/reference/glossary.md",version:"0.26",frontMatter:{id:"glossary",title:"Glossary"},sidebar:"version-0.26/Reference",previous:{title:"Temporal functions",permalink:"/docs/0.26/reference/feel/builtin-functions/feel-built-in-functions-temporal"}},c=[{value:"Broker",id:"broker",children:[]},{value:"Client",id:"client",children:[]},{value:"Cluster",id:"cluster",children:[]},{value:"Command",id:"command",children:[]},{value:"Correlation",id:"correlation",children:[]},{value:"Correlation Key",id:"correlation-key",children:[]},{value:"Deployment",id:"deployment",children:[]},{value:"Event",id:"event",children:[]},{value:"Exporter",id:"exporter",children:[]},{value:"Follower",id:"follower",children:[]},{value:"Gateway",id:"gateway",children:[]},{value:"Incident",id:"incident",children:[]},{value:"Job",id:"job",children:[]},{value:"Job activation timeout",id:"job-activation-timeout",children:[]},{value:"Job worker",id:"job-worker",children:[]},{value:"Leader",id:"leader",children:[]},{value:"Log",id:"log",children:[]},{value:"Message",id:"message",children:[]},{value:"Partition",id:"partition",children:[]},{value:"Record",id:"record",children:[]},{value:"Replication",id:"replication",children:[]},{value:"Replication factor",id:"replication-factor",children:[]},{value:"Request timeout",id:"request-timeout",children:[]},{value:"Snapshot",id:"snapshot",children:[]},{value:"Segment",id:"segment",children:[]},{value:"Worker",id:"worker",children:[]},{value:"Workflow",id:"workflow",children:[]},{value:"Workflow instance",id:"workflow-instance",children:[]},{value:"Workflow instance variable",id:"workflow-instance-variable",children:[]}],u={toc:c};function p(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This section defines commonly used terminology referenced within the documentation."),(0,a.kt)("h3",{id:"broker"},"Broker"),(0,a.kt)("p",null,"A broker is an instance of a Zeebe installation which executes workflows and manages workflow state. A single broker will be installed on a single machine."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/architecture#broker"},"Architecture"))),(0,a.kt)("h3",{id:"client"},"Client"),(0,a.kt)("p",null,"A client interacts with the Zeebe broker on behalf of the business application. Clients poll for work from the broker."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/architecture#client"},"Architecture"))),(0,a.kt)("h3",{id:"cluster"},"Cluster"),(0,a.kt)("p",null,"A cluster represents a configuration of one or more brokers collaborating to execute workflows. Each broker in a cluster acts as a leader or a follower."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/clustering"},"Clustering"))),(0,a.kt)("h3",{id:"command"},"Command"),(0,a.kt)("p",null,"A command represents an action to be taken or executed. Example commands include: deploy a workflow, execute a workflow, etc."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/internal-processing#events-and-commands"},"Internal processing"))),(0,a.kt)("h3",{id:"correlation"},"Correlation"),(0,a.kt)("p",null,"Correlation refers to the act of matching a message with an inflight workflow instance."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/messages"},"Message correlation"))),(0,a.kt)("h3",{id:"correlation-key"},"Correlation Key"),(0,a.kt)("p",null,"A correlation is an attribute within a message which is used to match this message against a certain variable within an inflight workflow instance. If the value of the correlation key matches the value of the variable within the workflow instance, the message is matched to this workflow instance."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/messages"},"Message correlation"))),(0,a.kt)("h3",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"A workflow cannot execute unless it is known by the broker. Deployment is the process of pushing or deploying worklows to the broker."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/deployment-guide/getting-started/deploy-a-workflow"},"Getting started tutorial: Deploy a workflow"))),(0,a.kt)("h3",{id:"event"},"Event"),(0,a.kt)("p",null,"An event represents a state change associated with an aspect of an executing workflow instance. Events capture variable changes, state transition in workflow elements, etc. An event will be represented by a timestamp, the variable name and variable value. Events are stored in an append-only log."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/internal-processing#events-and-commands"},"Internal processing"))),(0,a.kt)("h3",{id:"exporter"},"Exporter"),(0,a.kt)("p",null,"An exporter represents a sink to which Zeebe will submitted all records within the log. This gives users of Zeebe an opportunity to persist records with the log for future use as this data will not be available after log compaction."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/open-source/exporters"},"Exporter"))),(0,a.kt)("h3",{id:"follower"},"Follower"),(0,a.kt)("p",null,"In a clustered environment, a broker which is not a leader is a follower of a given partition. A follower can become the new leader when the old leader is no longer reachable."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/clustering#raft-consensus-and-replication-protocol"},"Clustering"))),(0,a.kt)("h3",{id:"gateway"},"Gateway"),(0,a.kt)("p",null,"Clients communicate with the Zeebe cluster through a gateway. The gateway provides a gRPC API and forwards client commands to the cluster. Depending on the setup, a gateway can be embedded in the broker or can be configured to be standalone."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/architecture#gateway"},"Architecture"))),(0,a.kt)("h3",{id:"incident"},"Incident"),(0,a.kt)("p",null,"An incident represents an error condition which prevents Zeebe from advancing an executing workflow instance. Zeebe will create an incident if there was an uncaught exception thrown in your code and the number of retries of the given step has been exceeded."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/incidents"},"Incident"))),(0,a.kt)("h3",{id:"job"},"Job"),(0,a.kt)("p",null,"A job represents a distinct unit of work within a business process. Service tasks represent such\njobs in your workflow and are identified by a unique id. A job has a type to allow specific job\nworkers to find jobs that they can work on."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/job-workers#what-is-a-job"},"Job workers"))),(0,a.kt)("h3",{id:"job-activation-timeout"},"Job activation timeout"),(0,a.kt)("p",null,"This is the amount of time the broker will wait for a complete or fail response from the job worker after a job has been submitted to the job worker for processing before it marks the job as available again for other job workers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/job-workers#requesting-jobs-from-the-broker"},"Job workers"))),(0,a.kt)("h3",{id:"job-worker"},"Job worker"),(0,a.kt)("p",null,"A special type of client that polls for and executes available jobs. An uncompleted job prevents Zeebe from advancing workflow execution to the next step."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/job-workers"},"Job workers"))),(0,a.kt)("h3",{id:"leader"},"Leader"),(0,a.kt)("p",null,"In a clustered environment, one broker, the leader, is responsible for workflow execution and housekeeping of data within a partition. Housekeeping includes, taking snapshots, replication and running exports."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/clustering#raft-consensus-and-replication-protocol"},"Clustering"))),(0,a.kt)("h3",{id:"log"},"Log"),(0,a.kt)("p",null,"The log comprises of an ordered sequence of records written to persistent storage. The log is appended-only and is stored on disk within the broker."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/partitions#partition-data-layout"},"Partitions"))),(0,a.kt)("h3",{id:"message"},"Message"),(0,a.kt)("p",null,"A message contains information to be delivered to interested parties during execution of a workflow instance. Messages can be published via Kafka or Zeebe\u2019s internal messaging system. Messages are associated with timestamp and other constraints such as time-to-live (TTL)."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/messages"},"Messages"))),(0,a.kt)("h3",{id:"partition"},"Partition"),(0,a.kt)("p",null,"A partition represents a logical grouping of data in a Zeebe broker. This data includes workflow instance variables stored in RocksDB, commands and events generated by Zeebe stored in the log. The number of partitions is defined by configuration."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/partitions"},"Partitions"))),(0,a.kt)("h3",{id:"record"},"Record"),(0,a.kt)("p",null,"A record represents a command or an event. For example, a command to create a new workflow instance, or a state transition of an executing workflow instance representing an event at a given point in time would result to generation of a record. During the execution lifecycle of a workflow instance, numerous records will be generated to capture various commands and events generated. Records are stored in the log."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/internal-processing#events-and-commands"},"Internal processing"))),(0,a.kt)("h3",{id:"replication"},"Replication"),(0,a.kt)("p",null,"Replication is the act of copying data in a partition from a leader to its followers within a clustered Zeebe installation. After ",(0,a.kt)("em",{parentName:"p"},"replication"),", the leader and followers of a partition will have the exact same data. Replication allows the system to be resilient to brokers going down."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/clustering#raft-consensus-and-replication-protocol"},"Clustering"))),(0,a.kt)("h3",{id:"replication-factor"},"Replication factor"),(0,a.kt)("p",null,"This is the number of times data in a partition will be copied and this depends on the number of brokers in a cluster. A cluster with one leader and two followers will have a replication factor of three, as data in each partition needs to have three copies."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/technical-concepts/clustering#raft-consensus-and-replication-protocol"},"Clustering"))),(0,a.kt)("h3",{id:"request-timeout"},"Request timeout"),(0,a.kt)("p",null,"This is how long a client will wait for a response from the broker after the client has submitted a request. If a response is not received within the client request timeout, the client can consider the broker unreachable."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/reference/grpc"},"Zeebe API (gRPC)"))),(0,a.kt)("h3",{id:"snapshot"},"Snapshot"),(0,a.kt)("p",null,"The state of all active workflows instances, (these are also known as inflight workflow instances) are stored as records in an in-memory database called RocksDB. A snapshot represents a copy of all data within the in-memory database at any given point in time. Snapshots are binary images stored on disk and can be used to restore execution state of a workflow. The size of a snapshot is affected by the size of the data. Size of the data depends on several factors including complexity of the model or business process, the size and quantity of variables in each workflow instance as well as the total number of executing workflow instances in a broker."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/deployment-guide/operations/resource-planning#snapshots"},"Resource planning"))),(0,a.kt)("h3",{id:"segment"},"Segment"),(0,a.kt)("p",null,"The log consists of one or more ",(0,a.kt)("em",{parentName:"p"},"segments"),". Each ",(0,a.kt)("em",{parentName:"p"},"segment")," is a file that contains an ordered sequence records. ",(0,a.kt)("em",{parentName:"p"},"Segments")," are deleted when the log is compacted."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/zeebe/deployment-guide/operations/resource-planning#event-log"},"Resource planning"))),(0,a.kt)("h3",{id:"worker"},"Worker"),(0,a.kt)("p",null,"A worker executes a job. In the Zeebe nomenclature, these are also referred to as job workers."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/job-workers"},"Job workers"))),(0,a.kt)("h3",{id:"workflow"},"Workflow"),(0,a.kt)("p",null,"A workflow is a defined sequence of distinct steps representing your business logic. Examples of a\nworkflow could be an e-commerce shopping experience, onboarding a new employee, etc. In Zeebe,\nworkflows are identified by a unique process id. The workflow is usually also referred to as the\nBPMN model."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/workflows"},"Workflows"))),(0,a.kt)("h3",{id:"workflow-instance"},"Workflow instance"),(0,a.kt)("p",null,"While a workflow represents a defined sequence of distinct steps representing your business logic, a workflow instance represents a currently executing or completed workflow. For a single workflow, there could be many associated ",(0,a.kt)("em",{parentName:"p"},"workflow instances")," in various stages of their executing lifecycle. Workflow instances are identitied by workflow instance id. Executing workflows instances are also sometimes referred to as inflight workflows."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/workflows"},"Workflows"))),(0,a.kt)("h3",{id:"workflow-instance-variable"},"Workflow instance variable"),(0,a.kt)("p",null,"A workflow instance variable represents the execution state (i.e data) of a workflow instance. These variables capture business process parameters which are input and output of various stages of the workflow instance and which also influence process flow execution."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/components/concepts/variables"},"Variables")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/0.26/reference/bpmn-workflows/data-flow"},"Data flow"))))}p.isMDXComponent=!0}}]);