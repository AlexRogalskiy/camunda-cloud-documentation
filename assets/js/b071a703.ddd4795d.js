(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[21861],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},74217:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var r=n(22122),a=n(19756),o=(n(67294),n(3905)),s={id:"internal-processing",title:"Internal Processing"},i=void 0,c={unversionedId:"product-manuals/zeebe/basics/internal-processing",id:"version-0.25/product-manuals/zeebe/basics/internal-processing",isDocsHomePage:!1,title:"Internal Processing",description:"Internally, Zeebe is implemented as a collection of stream processors working on record streams \\(partitions\\). The stream processing model is used since it is a unified approach to provide:",source:"@site/versioned_docs/version-0.25/product-manuals/zeebe/basics/internal-processing.md",sourceDirName:"product-manuals/zeebe/basics",slug:"/product-manuals/zeebe/basics/internal-processing",permalink:"/docs/0.25/product-manuals/zeebe/basics/internal-processing",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.25/product-manuals/zeebe/basics/internal-processing.md",version:"0.25",frontMatter:{id:"internal-processing",title:"Internal Processing"},sidebar:"version-0.25/Product Manuals",previous:{title:"Protocols",permalink:"/docs/0.25/product-manuals/zeebe/basics/protocols"},next:{title:"Exporters",permalink:"/docs/0.25/product-manuals/zeebe/basics/exporters"}},l=[{value:"State Machines",id:"state-machines",children:[]},{value:"Events and Commands",id:"events-and-commands",children:[]},{value:"Stateful Stream Processing",id:"stateful-stream-processing",children:[]},{value:"Command Triggers",id:"command-triggers",children:[]}],p={toc:l};function m(e){var t=e.components,s=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Internally, Zeebe is implemented as a collection of ",(0,o.kt)("em",{parentName:"p"},"stream processors")," working on record streams ","(","partitions",")",". The stream processing model is used since it is a unified approach to provide:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Command Protocol ","(","Request-Response",")",","),(0,o.kt)("li",{parentName:"ul"},"Record Export ","(","Streaming",")",","),(0,o.kt)("li",{parentName:"ul"},"Workflow Evaluation ","(","Asynchronous Background Tasks",")")),(0,o.kt)("p",null,"Record export solves the history problem: The stream provides exactly the kind of exhaustive audit log that a workflow engine needs to produce."),(0,o.kt)("h2",{id:"state-machines"},"State Machines"),(0,o.kt)("p",null,"Zeebe manages stateful entities: Jobs, Workflows, etc. Internally, these entities are implemented as ",(0,o.kt)("em",{parentName:"p"},"State Machines")," managed by a stream processor."),(0,o.kt)("p",null,"The concept of the state machine pattern is simple: An instance of a state machine is always in one of several logical states. From each state, a set of transitions defines the next possible states. Transitioning into a new state may produce outputs/side effects."),(0,o.kt)("p",null,"Let's look at the state machine for jobs. Simplified, it looks as follows:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"partition",src:n(21183).Z})),(0,o.kt)("p",null,"Every oval is a state. Every arrow is a state transition. Note how each state transition is only applicable in a specific state. For example, it is not possible to complete a job when it is in state ",(0,o.kt)("inlineCode",{parentName:"p"},"CREATED"),"."),(0,o.kt)("h2",{id:"events-and-commands"},"Events and Commands"),(0,o.kt)("p",null,"Every state change in a state machine is called an ",(0,o.kt)("em",{parentName:"p"},"event"),". Zeebe publishes every event as a record on the stream."),(0,o.kt)("p",null,"State changes can be requested by submitting a ",(0,o.kt)("em",{parentName:"p"},"command"),". A Zeebe broker receives commands from two sources:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Clients send commands remotely. Examples: Deploying workflows, starting workflow instances, creating and completing jobs, etc."),(0,o.kt)("li",{parentName:"ol"},"The broker itself generates commands. Examples: Locking a job for exclusive processing by a worker, etc.")),(0,o.kt)("p",null,"Once received, a command is published as a record on the addressed stream."),(0,o.kt)("h2",{id:"stateful-stream-processing"},"Stateful Stream Processing"),(0,o.kt)("p",null,"A stream processor reads the record stream sequentially and interprets the commands with respect to the addressed entity's lifecycle. More specifically, a stream processor repeatedly performs the following steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Consume the next command from the stream."),(0,o.kt)("li",{parentName:"ol"},"Determine whether the command is applicable based on the state lifecycle and the entity's current state."),(0,o.kt)("li",{parentName:"ol"},"If the command is applicable: Apply it to the state machine. If the command was sent by a client, send a reply/response."),(0,o.kt)("li",{parentName:"ol"},"If the command is not applicable: Reject it. If it was sent by a client, send an error reply/response."),(0,o.kt)("li",{parentName:"ol"},"Publish an event reporting the entity's new state.")),(0,o.kt)("p",null,"For example, processing the ",(0,o.kt)("em",{parentName:"p"},"Create Job")," command produces the event ",(0,o.kt)("em",{parentName:"p"},"Job Created"),"."),(0,o.kt)("h2",{id:"command-triggers"},"Command Triggers"),(0,o.kt)("p",null,"A state change which occurred in one entity can automatically trigger a command for another entity. Example: When a job is completed, the corresponding workflow instance shall continue with the next step. Thus, the Event ",(0,o.kt)("em",{parentName:"p"},"Job Completed")," triggers the command ",(0,o.kt)("em",{parentName:"p"},"Complete Activity"),"."))}m.isMDXComponent=!0},21183:function(e,t,n){"use strict";t.Z=n.p+"assets/images/internal-processing-job-5c7cc582b13160d2ad476726ff8ec118.png"}}]);