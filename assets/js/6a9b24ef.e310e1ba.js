(self.webpackChunkcamunda_cloud_documentation=self.webpackChunkcamunda_cloud_documentation||[]).push([[67411],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(67294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),f=c(n),d=s,m=f["".concat(l,".").concat(d)]||f[d]||u[d]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,a=new Array(i);a[0]=f;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:s,a[1]=o;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},30151:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return c},default:function(){return u}});var r=n(22122),s=n(19756),i=(n(67294),n(3905)),a={id:"what-is-feel",title:"What is FEEL?"},o=void 0,l={unversionedId:"reference/feel/what-is-feel",id:"reference/feel/what-is-feel",isDocsHomePage:!1,title:"What is FEEL?",description:"Friendly Enough Expression Language (FEEL) is a part of the DMN specification of the OMG. It is designed to write expressions for decision tables and literal expressions in a simple way that is easily understood by business professionals and developers.",source:"@site/docs/reference/feel/what-is-feel.md",sourceDirName:"reference/feel",slug:"/reference/feel/what-is-feel",permalink:"/docs/reference/feel/what-is-feel",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/reference/feel/what-is-feel.md",version:"current",frontMatter:{id:"what-is-feel",title:"What is FEEL?"},sidebar:"Reference",previous:{title:"Multi-Instance",permalink:"/docs/reference/bpmn-processes/multi-instance/multi-instance"},next:{title:"Data Types",permalink:"/docs/reference/feel/language-guide/feel-data-types"}},c=[{value:"Unary tests vs. expression",id:"unary-tests-vs-expression",children:[{value:"Unary tests",id:"unary-tests",children:[]},{value:"Expression",id:"expression",children:[]}]}],p={toc:c};function u(e){var t=e.components,n=(0,s.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Friendly Enough Expression Language (FEEL) is a part of the ",(0,i.kt)("a",{parentName:"p",href:"http://www.omg.org/spec/DMN/"},"DMN specification")," of the OMG. It is designed to write expressions for decision tables and literal expressions in a simple way that is easily understood by business professionals and developers."),(0,i.kt)("h2",{id:"unary-tests-vs-expression"},"Unary tests vs. expression"),(0,i.kt)("p",null,"FEEL has two entry points: unary-tests and expressions. "),(0,i.kt)("h3",{id:"unary-tests"},"Unary tests"),(0,i.kt)("p",null,"Unary-Tests can be used only for input entries of a decision table. They are a special kind of expression with a different grammar. The expression gets the value of the input expression implicitly as the first argument. The result of the expression must be either ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'< 7                                                 \n// input less than 7\n\nnot(2,4)                                            \n// input is not 2 or 4\n\n[date("2015-09-17")..date("2015-09-19")]            \n// input is between \'2015-09-17\' and \'2015-09-19\'\n\n<= duration("P1D")                                  \n// input is less or equal one day    \n')),(0,i.kt)("h3",{id:"expression"},"Expression"),(0,i.kt)("p",null,"Expressions can be used everywhere (e.g. in a decision table as input expression or output entry). An expression takes no implicit arguments like unary-tests."),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'applicant.monthly.income * 12                                           \n\nif applicant.maritalStatus in ("M","S") then "valid" else "not valid"    \n\nsum( [applicant.monthly.repayments, applicant.monthly.expenses] )        \n\nsum( credit_history[record_date > date("2011-01-01")].weight )           \n\nsome ch in credit_history satisfies ch.event = "bankruptcy"      \n')))}u.isMDXComponent=!0}}]);