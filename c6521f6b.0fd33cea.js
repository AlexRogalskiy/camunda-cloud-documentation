(window.webpackJsonp=window.webpackJsonp||[]).push([[615],{683:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return b})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return o}));var a=n(3),l=n(7),i=(n(0),n(874)),r={id:"expressions",title:"Expressions"},b={unversionedId:"product-manuals/zeebe/reference/expressions",id:"version-0.25/product-manuals/zeebe/reference/expressions",isDocsHomePage:!1,title:"Expressions",description:"Expressions can be used to access variables and calculate values dynamically.",source:"@site/versioned_docs/version-0.25/product-manuals/zeebe/reference/expressions.md",slug:"/product-manuals/zeebe/reference/expressions",permalink:"/docs/0.25/product-manuals/zeebe/reference/expressions",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-0.25/product-manuals/zeebe/reference/expressions.md",version:"0.25",sidebar:"version-0.25/Product Manuals",previous:{title:"Variables",permalink:"/docs/0.25/product-manuals/zeebe/reference/variables"},next:{title:"Message Correlation",permalink:"/docs/0.25/product-manuals/zeebe/reference/message-correlation/message-correlation"}},c=[{value:"Expressions vs. Static Values",id:"expressions-vs-static-values",children:[]},{value:"The Expression Language",id:"the-expression-language",children:[{value:"Access Variables",id:"access-variables",children:[]},{value:"Boolean Expressions",id:"boolean-expressions",children:[]},{value:"Null Checks",id:"null-checks",children:[]},{value:"String Expressions",id:"string-expressions",children:[]},{value:"Temporal Expressions",id:"temporal-expressions",children:[]},{value:"List Expressions",id:"list-expressions",children:[]},{value:"Invoke Functions",id:"invoke-functions",children:[]}]},{value:"Additional Resources",id:"additional-resources",children:[]}],s={rightToc:c};function o(e){var t=e.components,n=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Expressions can be used to access variables and calculate values dynamically."),Object(i.b)("p",null,"The following attributes of BPMN elements ",Object(i.b)("strong",{parentName:"p"},"require")," an expression:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Sequence Flow on an Exclusive Gateway: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/exclusive-gateways/exclusive-gateways#conditions"}),"condition")),Object(i.b)("li",{parentName:"ul"},"Message Catch Event / Receive Task: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/message-events/message-events#messages"}),"correlation key")),Object(i.b)("li",{parentName:"ul"},"Multi-Instance Activity: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/multi-instance/multi-instance#defining-the-collection-to-iterate-over"}),"input collection"),", ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/multi-instance/multi-instance#collecting-the-output"}),"output element")),Object(i.b)("li",{parentName:"ul"},"Input/Output Variable Mappings: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/reference/variables#inputoutput-variable-mappings"}),"source"))),Object(i.b)("p",null,"Additionally, the following attributes of BPMN elements can define an expression ",Object(i.b)("strong",{parentName:"p"},"optionally")," instead of a static value:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Timer Catch Event: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/timer-events/timer-events#timers"}),"timer definition")),Object(i.b)("li",{parentName:"ul"},"Message Catch Event / Receive Task: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/message-events/message-events#messages"}),"message name")),Object(i.b)("li",{parentName:"ul"},"Service Task: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/service-tasks/service-tasks#task-definition"}),"job type"),", ","[job retries]","..(/bpmn-workflows/service-tasks/service-tasks.md#task-definition)"),Object(i.b)("li",{parentName:"ul"},"Call Activity: ",Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"/docs/0.25/product-manuals/zeebe/bpmn-workflows/call-activities/call-activities#defining-the-called-workflow"}),"process id"))),Object(i.b)("h2",{id:"expressions-vs-static-values"},"Expressions vs. Static Values"),Object(i.b)("p",null,"Some attributes of BPMN elements, like the timer definition of a timer catch event, can be defined either as a static value (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"PT2H"),") or as an expression (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},"= remaingTime"),")."),Object(i.b)("p",null,"The value is identified as an expression if it starts with an ",Object(i.b)("strong",{parentName:"p"},"equal sign")," ",Object(i.b)("inlineCode",{parentName:"p"},"=")," (i.e. the expression prefix). The text behind the equal sign is the actual expression. For example, ",Object(i.b)("inlineCode",{parentName:"p"},"= remaingTime")," defines the expression ",Object(i.b)("inlineCode",{parentName:"p"},"remaingTime")," that accesses a variable with the name ",Object(i.b)("inlineCode",{parentName:"p"},"remaingTime"),"."),Object(i.b)("p",null,"If the value doesn't have the prefix then it is used as static value. A static value is used either as a string (e.g. job type) or as a number (e.g. job retries). A string value must not be enclosed in quotes."),Object(i.b)("p",null,"Note that an expression can also define a static value by using literals (e.g. ",Object(i.b)("inlineCode",{parentName:"p"},'"foo"'),", ",Object(i.b)("inlineCode",{parentName:"p"},"21"),", ",Object(i.b)("inlineCode",{parentName:"p"},"true"),", ",Object(i.b)("inlineCode",{parentName:"p"},"[1,2,3]"),", ",Object(i.b)("inlineCode",{parentName:"p"},"{x: 22}"),", etc.)."),Object(i.b)("h2",{id:"the-expression-language"},"The Expression Language"),Object(i.b)("p",null,"An expression is written in ",Object(i.b)("strong",{parentName:"p"},"FEEL")," (Friendly Enough Expression Language). FEEL is part of the OMG's DMN (Decision Model and Notation) specification. It is designed to have the following properties:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Side-effect free"),Object(i.b)("li",{parentName:"ul"},"Simple data model with JSON-like object types: numbers, dates, strings, lists, and contexts"),Object(i.b)("li",{parentName:"ul"},"Simple syntax designed for business professionals and developers"),Object(i.b)("li",{parentName:"ul"},"Three-valued logic (true, false, null)")),Object(i.b)("p",null,"Zeebe integrates the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/camunda/feel-scala"}),"Feel-Scala")," engine (version ",Object(i.b)("inlineCode",{parentName:"p"},"1.12.x"),") to evaluate FEEL expressions. The following sections cover common use cases in Zeebe. A complete list of supported expressions can be found in the project's ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://camunda.github.io/feel-scala/1.12/"}),"documentation"),"."),Object(i.b)("h3",{id:"access-variables"},"Access Variables"),Object(i.b)("p",null,"A variable can be accessed by its name."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'owner\n// "Paul"\n\ntotalPrice\n// 21.2\n\nitems\n// ["item-1", "item-2", "item-3"]\n')),Object(i.b)("p",null,"If a variable is a JSON document/object then it is handled as a FEEL context. A property of the context (aka nested variable property) can be accessed by ",Object(i.b)("inlineCode",{parentName:"p"},".")," (a dot) and the property name."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'order.id\n// "order-123"\n\norder.customer.name\n// "Paul"\n')),Object(i.b)("h3",{id:"boolean-expressions"},"Boolean Expressions"),Object(i.b)("p",null,"Values can be compared using the following operators:"),Object(i.b)("table",null,Object(i.b)("tr",null,Object(i.b)("th",null,"Operator"),Object(i.b)("th",null,"Description"),Object(i.b)("th",null,"Example")),Object(i.b)("tr",null,Object(i.b)("td",null,"= (only ",Object(i.b)("b",null,"one")," equal sign)"),Object(i.b)("td",null,"equal to"),Object(i.b)("td",null,'owner = "Paul"')),Object(i.b)("tr",null,Object(i.b)("td",null,"!="),Object(i.b)("td",null,"not equal to"),Object(i.b)("td",null,'owner != "Paul"')),Object(i.b)("tr",null,Object(i.b)("td",null,"<"),Object(i.b)("td",null,"less than"),Object(i.b)("td",null,"totalPrice < 25")),Object(i.b)("tr",null,Object(i.b)("td",null,"<="),Object(i.b)("td",null,"less than or equal to"),Object(i.b)("td",null,"totalPrice <= 25")),Object(i.b)("tr",null,Object(i.b)("td",null,">"),Object(i.b)("td",null,"greater than"),Object(i.b)("td",null,"totalPrice > 25")),Object(i.b)("tr",null,Object(i.b)("td",null,">="),Object(i.b)("td",null,"greater than or equal to"),Object(i.b)("td",null,"totalPrice >= 25")),Object(i.b)("tr",null,Object(i.b)("td",null,"between _ and _"),Object(i.b)("td",null,"same as ",Object(i.b)("i",null,"(x >= _ and x <= _)")),Object(i.b)("td",null,"totalPrice between 10 and 25"))),Object(i.b)("p",null,"Multiple boolean values can be combined as disjunction (",Object(i.b)("inlineCode",{parentName:"p"},"and"),") or conjunction (",Object(i.b)("inlineCode",{parentName:"p"},"or"),")."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),"orderCount >= 5 and orderCount < 15\n\norderCount > 15 or totalPrice > 50\n")),Object(i.b)("h3",{id:"null-checks"},"Null Checks"),Object(i.b)("p",null,"If a variable or a nested property can be ",Object(i.b)("inlineCode",{parentName:"p"},"null")," then it can be compared to the ",Object(i.b)("inlineCode",{parentName:"p"},"null")," value. Comparing ",Object(i.b)("inlineCode",{parentName:"p"},"null")," to a value different from ",Object(i.b)("inlineCode",{parentName:"p"},"null")," results in ",Object(i.b)("inlineCode",{parentName:"p"},"false"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'order = null\n// true - if "order" is null or doesn\'t exist\n\norder.id = null\n// true - if "order" is null, "order" doesn\'t exist,\n//           "id" is null, or "order" has no property "id"\n')),Object(i.b)("p",null,"In addition to the comparison with ",Object(i.b)("inlineCode",{parentName:"p"},"null"),", the built-in function ",Object(i.b)("inlineCode",{parentName:"p"},"is defined()")," can be used to differentiate between a value that is ",Object(i.b)("inlineCode",{parentName:"p"},"null")," and a value that doesn\u2019t exist."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'is defined(order)\n// true - if "order" has any value or is null\n\nis defined(order.id)\n// false - if "order" doesn\'t exist or it has no property "id"\n')),Object(i.b)("h3",{id:"string-expressions"},"String Expressions"),Object(i.b)("p",null,"A string value must be enclosed in double quotes. Multiple string values can be concatenated using the ",Object(i.b)("inlineCode",{parentName:"p"},"+")," operator."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'"foo" + "bar"\n// "foobar"\n')),Object(i.b)("p",null,"Any value can be transformed into a string value using the ",Object(i.b)("inlineCode",{parentName:"p"},"string()")," function."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'"order-" + string(orderId)\n// "order-123"\n')),Object(i.b)("p",null,"More functions for string values are available as ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://camunda.github.io/feel-scala/1.12/feel-built-in-functions#string-functions"}),"built-in functions")," (e.g. contains, matches, etc.)."),Object(i.b)("h3",{id:"temporal-expressions"},"Temporal Expressions"),Object(i.b)("p",null,"The following operators can be applied on temporal values:"),Object(i.b)("table",null,Object(i.b)("tr",null,Object(i.b)("th",null,"Temporal Type"),Object(i.b)("th",null,"Examples"),Object(i.b)("th",null,"Operators")),Object(i.b)("tr",null,Object(i.b)("td",null,"date"),Object(i.b)("td",null,'date("2020-04-06")'),Object(i.b)("td",null,Object(i.b)("li",null,"date + duration"),Object(i.b)("li",null,"date - date"),Object(i.b)("li",null,"date - duration"))),Object(i.b)("tr",null,Object(i.b)("td",null,"time"),Object(i.b)("td",null,'time("15:30:00"),',Object(i.b)("br",null),'time("15:30:00+02:00"),',Object(i.b)("br",null),'time("15:30:00@Europe/Berlin")'),Object(i.b)("td",null,Object(i.b)("li",null,"time + duration"),Object(i.b)("li",null,"time - time"),Object(i.b)("li",null,"time - duration"))),Object(i.b)("tr",null,Object(i.b)("td",null,"date-time"),Object(i.b)("td",null,'date and time("2020-04-06T15:30:00"),',Object(i.b)("br",null),'date and time("2020-04-06T15:30:00+02:00"),',Object(i.b)("br",null),'date and time("2020-04-06T15:30:00@UTC")'),Object(i.b)("td",null,Object(i.b)("li",null,"date-time + duration"),Object(i.b)("li",null,"date-time - date-time"),Object(i.b)("li",null,"date-time - duration"))),Object(i.b)("tr",null,Object(i.b)("td",null,"duration"),Object(i.b)("td",null,'duration("P12H"),',Object(i.b)("br",null),' duration("P4Y")'),Object(i.b)("td",null,Object(i.b)("li",null,"duration + duration"),Object(i.b)("li",null,"duration + date"),Object(i.b)("li",null,"duration + time"),Object(i.b)("li",null,"duration + date-time"),Object(i.b)("li",null,"duration - duration"),Object(i.b)("li",null,"date - duration"),Object(i.b)("li",null,"time - duration"),Object(i.b)("li",null,"date-time - duration"),Object(i.b)("li",null,"duration * number"),Object(i.b)("li",null,"duration / duration"),Object(i.b)("li",null,"duration / number"))),Object(i.b)("tr",null,Object(i.b)("td",null,"cycle"),Object(i.b)("td",null,'cycle(3, duration("PT1H")),',Object(i.b)("br",null),' cycle(duration("P7D"))'),Object(i.b)("td",null," "))),Object(i.b)("p",null,"A temporal value can be compared in a boolean expression with another temporal value of the same type."),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"cycle")," type is different from the other temporal types because it is not supported in the FEEL type system. Instead, it is defined as a function that returns the definition of the cycle as a string in the ISO 8601 format of a recurring time interval. The function expects two arguments: the number of repetitions and the recurring interval as duration. If the first argument is ",Object(i.b)("inlineCode",{parentName:"p"},"null")," or not passed in then the interval is unbounded (i.e. infinitely repeated)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'cycle(3, duration("PT1H"))\n// "R3/PT1H"\n\ncycle(duration("P7D"))\n// "R/P7D"\n')),Object(i.b)("p",null,"The current date and date-time can be accessed using the built-in functions ",Object(i.b)("inlineCode",{parentName:"p"},"today()")," and ",Object(i.b)("inlineCode",{parentName:"p"},"now()"),". In order to store the current date or date-time in a variable, it must be converted to a string using the built-in function ",Object(i.b)("inlineCode",{parentName:"p"},"string()"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'now()\n// date and time("2020-04-06T15:30:00@UTC")\n\ntoday()\n// date("2020-04-06")\n\nstring(today())\n// "2020-04-06"\n')),Object(i.b)("h3",{id:"list-expressions"},"List Expressions"),Object(i.b)("p",null,"An element of a list can be accessed by its index. The index starts at ",Object(i.b)("inlineCode",{parentName:"p"},"1")," with the first element (",Object(i.b)("strong",{parentName:"p"},"not")," at ",Object(i.b)("inlineCode",{parentName:"p"},"0"),"). A negative index starts at the end by ",Object(i.b)("inlineCode",{parentName:"p"},"-1"),". If the index is out of the range of the list then ",Object(i.b)("inlineCode",{parentName:"p"},"null")," is returned instead."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'["a","b","c"][1]\n// "a"\n\n["a","b","c"][2]\n// "b"\n\n["a","b","c"][-1]\n// "c"\n')),Object(i.b)("p",null,"A list value can be filtered using a boolean expression. The result is a list of elements that fulfill the condition. The current element in the condition is assigned to the variable ",Object(i.b)("inlineCode",{parentName:"p"},"item"),"."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),"[1,2,3,4][item > 2]\n// [3,4]\n")),Object(i.b)("p",null,"The operators ",Object(i.b)("inlineCode",{parentName:"p"},"every")," and ",Object(i.b)("inlineCode",{parentName:"p"},"some")," can be used to test if all elements or at least one element of a list fulfill a given condition."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),"every x in [1,2,3] satisfies x >= 2\n// false\n\nsome x in [1,2,3] satisfies x > 2\n// true\n")),Object(i.b)("h3",{id:"invoke-functions"},"Invoke Functions"),Object(i.b)("p",null,"FEEL defines a set of ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://camunda.github.io/feel-scala/1.12/feel-built-in-functions"}),"built-in functions")," to convert values and to apply different operations on specific value types in addition to the operators."),Object(i.b)("p",null,"A function can be invoked by its name followed by the arguments. The arguments can be assigned to the function parameters either by their position or by defining the parameter names."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-feel"}),'floor(1.5)\n// 1\n\ncount(["a","b","c"])\n// 3\n\nappend(["a","b"], "c")\n// ["a","b","c"]\n\ncontains(string: "foobar", match: "foo")\n// true\n')),Object(i.b)("h2",{id:"additional-resources"},"Additional Resources"),Object(i.b)("p",null,"References:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://camunda.github.io/feel-scala/1.12/"}),"FEEL-Scala - Documentation")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://camunda.github.io/feel-scala/1.12/feel-data-types"}),"FEEL - Data Types")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://camunda.github.io/feel-scala/1.12/feel-expression"}),"FEEL - Expressions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://camunda.github.io/feel-scala/1.12/feel-built-in-functions"}),"FEEL - Built-in Functions")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",Object(a.a)({parentName:"li"},{href:"https://www.omg.org/spec/DMN/About-DMN/"}),"DMN Specification"))))}o.isMDXComponent=!0},874:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),l=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function b(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=l.a.createContext({}),o=function(e){var t=l.a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):b(b({},t),e)),n},u=function(e){var t=o(e.components);return l.a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return l.a.createElement(l.a.Fragment,{},t)}},d=l.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,r=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),u=o(n),d=a,m=u["".concat(r,".").concat(d)]||u[d]||p[d]||i;return n?l.a.createElement(m,b(b({ref:t},s),{},{components:n})):l.a.createElement(m,b({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=d;var b={};for(var c in t)hasOwnProperty.call(t,c)&&(b[c]=t[c]);b.originalType=e,b.mdxType="string"==typeof e?e:a,r[1]=b;for(var s=2;s<i;s++)r[s]=n[s];return l.a.createElement.apply(null,r)}return l.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);