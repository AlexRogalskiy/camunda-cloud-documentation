(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{662:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return d}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=n.a.createContext({}),p=function(e){var t=n.a.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=p(e.components);return n.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},f=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),b=p(r),f=a,d=b["".concat(s,".").concat(f)]||b[f]||u[f]||i;return r?n.a.createElement(d,c(c({ref:t},l),{},{components:r})):n.a.createElement(d,c({ref:t},l))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=f;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:a,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.a.createElement.apply(null,s)}return n.a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},84:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return c})),r.d(t,"rightToc",(function(){return o})),r.d(t,"Tag",(function(){return l})),r.d(t,"default",(function(){return b}));var a=r(3),n=r(7),i=(r(0),r(662)),s={id:"task-query",title:"TaskQuery"},c={unversionedId:"reference/tasklist-api/inputs/task-query",id:"reference/tasklist-api/inputs/task-query",isDocsHomePage:!1,title:"TaskQuery",description:"<span",source:"@site/docs/reference/tasklist-api/inputs/task-query.mdx",slug:"/reference/tasklist-api/inputs/task-query",permalink:"/docs/reference/tasklist-api/inputs/task-query",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/reference/tasklist-api/inputs/task-query.mdx",version:"current",sidebar:"Reference",previous:{title:"TaskState",permalink:"/docs/reference/tasklist-api/enums/task-state"},next:{title:"VariableInput",permalink:"/docs/reference/tasklist-api/inputs/variable-input"}},o=[{value:"Fields",id:"fields",children:[]}],l=function(e){var t=e.children,r=e.color;return Object(i.b)("span",{style:{backgroundColor:r,borderRadius:"2px",color:"#fff",padding:"0.2rem"}},t)},p={rightToc:o,Tag:l};function b(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Task query - query to get one page of tasks."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-graphql"}),"type TaskQuery {\n  state: TaskState\n  assigned: Boolean\n  assignee: String\n  pageSize: Int\n  searchAfter: [String!]\n  searchAfterOrEqual: [String!]\n  searchBefore: [String!]\n  searchBeforeOrEqual: [String!]\n}\n")),Object(i.b)("h3",{id:"fields"},"Fields"),Object(i.b)("h4",{id:"state-taskstate"},Object(i.b)("inlineCode",{parentName:"h4"},"state")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/enums/task-state"}),Object(i.b)("inlineCode",{parentName:"a"},"TaskState")),")"),Object(i.b)("p",null,"State of the tasks"),Object(i.b)("h4",{id:"assigned-boolean"},Object(i.b)("inlineCode",{parentName:"h4"},"assigned")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/boolean"}),Object(i.b)("inlineCode",{parentName:"a"},"Boolean")),")"),Object(i.b)("p",null,"Are the tasks assigned?"),Object(i.b)("h4",{id:"assignee-string"},Object(i.b)("inlineCode",{parentName:"h4"},"assignee")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/string"}),Object(i.b)("inlineCode",{parentName:"a"},"String")),")"),Object(i.b)("p",null,"Who is assigned to the tasks?"),Object(i.b)("h4",{id:"pagesize-int"},Object(i.b)("inlineCode",{parentName:"h4"},"pageSize")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/int"}),Object(i.b)("inlineCode",{parentName:"a"},"Int")),")"),Object(i.b)("p",null,"Size of tasks page (default: 50)."),Object(i.b)("h4",{id:"searchafter-string"},Object(i.b)("inlineCode",{parentName:"h4"},"searchAfter")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/string"}),Object(i.b)("inlineCode",{parentName:"a"},"[String!]")),")"),Object(i.b)("p",null,"Array of values copied from ",Object(i.b)("inlineCode",{parentName:"p"},"sortValues")," of one of the tasks, query will return page of tasks going directly after this values plus same sort values."),Object(i.b)("h4",{id:"searchafterorequal-string"},Object(i.b)("inlineCode",{parentName:"h4"},"searchAfterOrEqual")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/string"}),Object(i.b)("inlineCode",{parentName:"a"},"[String!]")),")"),Object(i.b)("p",null,"Array of values copied from ",Object(i.b)("inlineCode",{parentName:"p"},"sortValues")," of one of the tasks, query will return page of tasks going directly after this values."),Object(i.b)("h4",{id:"searchbefore-string"},Object(i.b)("inlineCode",{parentName:"h4"},"searchBefore")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/string"}),Object(i.b)("inlineCode",{parentName:"a"},"[String!]")),")"),Object(i.b)("p",null,"Array of values copied from ",Object(i.b)("inlineCode",{parentName:"p"},"sortValues")," of one of the tasks, query will return page of tasks going directly before this values plus same sort values."),Object(i.b)("h4",{id:"searchbeforeorequal-string"},Object(i.b)("inlineCode",{parentName:"h4"},"searchBeforeOrEqual")," (",Object(i.b)("a",Object(a.a)({parentName:"h4"},{href:"/docs/reference/tasklist-api/scalars/string"}),Object(i.b)("inlineCode",{parentName:"a"},"[String!]")),")"),Object(i.b)("p",null,"Array of values copied from ",Object(i.b)("inlineCode",{parentName:"p"},"sortValues")," of one of the tasks, query will return page of tasks going directly before this values."))}b.isMDXComponent=!0}}]);