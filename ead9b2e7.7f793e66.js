(window.webpackJsonp=window.webpackJsonp||[]).push([[737],{1662:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/message-events-7076a95560df1aaf5f1301d677bafcd6.png"},804:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return o})),n.d(t,"default",(function(){return l}));var s=n(3),a=n(7),r=(n(0),n(874)),i={id:"message-events",title:"Message events"},c={unversionedId:"reference/bpmn-processes/message-events/message-events",id:"version-1.0/reference/bpmn-processes/message-events/message-events",isDocsHomePage:!1,title:"Message events",description:"Message events are events which reference a message. They are used to wait until a proper message is received.",source:"@site/versioned_docs/version-1.0/reference/bpmn-processes/message-events/message-events.md",slug:"/reference/bpmn-processes/message-events/message-events",permalink:"/docs/1.0/reference/bpmn-processes/message-events/message-events",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/versioned_docs/version-1.0/reference/bpmn-processes/message-events/message-events.md",version:"1.0",sidebar:"version-1.0/Reference",previous:{title:"None events",permalink:"/docs/1.0/reference/bpmn-processes/none-events/none-events"},next:{title:"Timer events",permalink:"/docs/1.0/reference/bpmn-processes/timer-events/timer-events"}},o=[{value:"Message start events",id:"message-start-events",children:[]},{value:"Intermediate message catch events",id:"intermediate-message-catch-events",children:[]},{value:"Message boundary events",id:"message-boundary-events",children:[]},{value:"Messages",id:"messages",children:[]},{value:"Variable mappings",id:"variable-mappings",children:[]},{value:"Additional resources",id:"additional-resources",children:[{value:"XML Representation",id:"xml-representation",children:[]},{value:"References",id:"references",children:[]}]}],p={rightToc:o};function l(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(r.b)("wrapper",Object(s.a)({},p,i,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Message events are events which reference a message. They are used to wait until a proper message is received."),Object(r.b)("p",null,Object(r.b)("img",{alt:"process",src:n(1662).default})),Object(r.b)("p",null,"At the moment, messages can be published only externally by using one of the Zeebe clients."),Object(r.b)("h2",{id:"message-start-events"},"Message start events"),Object(r.b)("p",null,"A process can have one or more message start events (besides other types of start events). Each of the message events must have a unique message name."),Object(r.b)("p",null,"When a process is deployed then it creates a message subscription for each message start event. Message subscriptions of the previous version of the process (based on the BPMN process id) are closed."),Object(r.b)("p",null,"When the message subscription is created then a message can be correlated to the start event if the message name matches. On correlating the message, a new process instance is created and the corresponding message start event is activated."),Object(r.b)("p",null,"Messages are ",Object(r.b)("strong",{parentName:"p"},"not")," correlated if they were published before the process was deployed. Or, if a new version of the process is deployed which doesn't have a proper start event."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," of a published message can be used to control the process instance creation. If an instance of this process is active (independently from its version) and it was triggered by a message with the same ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," then the message is ",Object(r.b)("strong",{parentName:"p"},"not")," correlated and no new instance is created. When the active process instance is ended (completed or terminated) and a message with the same ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," and a matching message name is buffered (i.e. TTL > 0) then this message is correlated and a new instance of the latest version of the process is created."),Object(r.b)("p",null,"If the ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," of a message is empty then it will always create a new process instance and does not check if an instance is already active."),Object(r.b)("h2",{id:"intermediate-message-catch-events"},"Intermediate message catch events"),Object(r.b)("p",null,"When an intermediate message catch event is entered then a corresponding message subscription is created. The process instance stops at this point and waits until the message is correlated. When a message is correlated, the catch event gets completed and the process instance continues."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"An alternative to intermediate message catch events are ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"/docs/1.0/reference/bpmn-processes/receive-tasks/receive-tasks"}),"receive tasks")," which behaves the same but can be used together with boundary events.")),Object(r.b)("h2",{id:"message-boundary-events"},"Message boundary events"),Object(r.b)("p",null,"An activity can have one or more message boundary events. Each of the message events must have a unique message name."),Object(r.b)("p",null,"When the activity is entered then it creates a corresponding message subscription for each boundary message event. If a non-interrupting boundary event is triggered then the activity is not terminated and multiple messages can be correlated."),Object(r.b)("h2",{id:"messages"},"Messages"),Object(r.b)("p",null,"A message can be referenced by one or more message events. It ",Object(r.b)("strong",{parentName:"p"},"must")," define the name of the message (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"Money collected"),") and the ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," expression (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"= orderId"),"). If the message is only referenced by message start events then the ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," is not required."),Object(r.b)("p",null,"Usually, the name of the message is defined as a static value (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"order canceled"),"), but it can also be defined as ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"/docs/1.0/product-manuals/concepts/expressions"}),"expression")," (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},'= "order " + awaitingAction'),"). If the expression belongs to a message start event of the process, then it is evaluated on deploying the process. Otherwise, it is evaluated on activating the message event. The evaluation must result in a ",Object(r.b)("inlineCode",{parentName:"p"},"string"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," is an expression that usually ",Object(r.b)("a",Object(s.a)({parentName:"p"},{href:"/docs/1.0/product-manuals/concepts/expressions#access-variables"}),"accesses a variable")," of the process instance that holds the correlation key of the message. The expression is evaluated on activating the message event and must result either in a ",Object(r.b)("inlineCode",{parentName:"p"},"string")," or in a ",Object(r.b)("inlineCode",{parentName:"p"},"number"),"."),Object(r.b)("p",null,"In order to correlate a message to the message event, the message is published with the defined name (e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"Money collected"),") and the ",Object(r.b)("strong",{parentName:"p"},"value")," of the ",Object(r.b)("inlineCode",{parentName:"p"},"correlationKey")," expression. For example, if the process instance has a variable ",Object(r.b)("inlineCode",{parentName:"p"},"orderId")," with value ",Object(r.b)("inlineCode",{parentName:"p"},'"order-123"')," then the message must be published with the correlation key ",Object(r.b)("inlineCode",{parentName:"p"},'"order-123"'),"."),Object(r.b)("h2",{id:"variable-mappings"},"Variable mappings"),Object(r.b)("p",null,"By default, all message variables are merged into the process instance. This behavior can be customized by defining an output mapping at the message catch event."),Object(r.b)("h2",{id:"additional-resources"},"Additional resources"),Object(r.b)("h3",{id:"xml-representation"},"XML Representation"),Object(r.b)("p",null,"A message start event with message definition:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-xml"}),'<bpmn:message id="Message_0z0aft4" name="order-placed" />\n\n<bpmn:startEvent id="order-placed" name="Order placed">\n  <bpmn:messageEventDefinition messageRef="Message_0z0aft4" />\n</bpmn:startEvent>\n')),Object(r.b)("p",null,"An intermediate message catch event with message definition:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-xml"}),'<bpmn:message id="Message_1iz5qtq" name="money-collected">\n  <bpmn:extensionElements>\n    <zeebe:subscription correlationKey="= orderId" />\n  </bpmn:extensionElements>\n</bpmn:message>\n\n<bpmn:intermediateCatchEvent id="money-collected" name="Money collected" >\n  <bpmn:messageEventDefinition messageRef="Message_1iz5qtq" />\n</bpmn:intermediateCatchEvent>\n')),Object(r.b)("p",null,"A boundary message event:"),Object(r.b)("pre",null,Object(r.b)("code",Object(s.a)({parentName:"pre"},{className:"language-xml"}),'<bpmn:boundaryEvent id="order-canceled" name="Order Canceled"\n  attachedToRef="collect-money">\n  <bpmn:messageEventDefinition messageRef="Message_1iz5qtq" />\n</bpmn:boundaryEvent>\n')),Object(r.b)("h3",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"/docs/1.0/product-manuals/concepts/messages"}),"Message correlation")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"/docs/1.0/product-manuals/concepts/expressions"}),"Expressions")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"/docs/1.0/product-manuals/concepts/variables#inputoutput-variable-mappings"}),"Variable mappings")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",Object(s.a)({parentName:"li"},{href:"/docs/1.0/product-manuals/concepts/incidents"}),"Incidents"))))}l.isMDXComponent=!0},874:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return u}));var s=n(0),a=n.n(s);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},b=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},d=a.a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),b=l(n),d=s,u=b["".concat(i,".").concat(d)]||b[d]||m[d]||r;return n?a.a.createElement(u,c(c({ref:t},p),{},{components:n})):a.a.createElement(u,c({ref:t},p))}));function u(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=n.length,i=new Array(r);i[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:s,i[1]=c;for(var p=2;p<r;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);