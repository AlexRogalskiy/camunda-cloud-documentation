(window.webpackJsonp=window.webpackJsonp||[]).push([[188],{260:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),r=n(7),o=(n(0),n(452)),c={id:"build-your-own-client",title:"Build your own client"},i={unversionedId:"product-manuals/clients/build-your-own-client",id:"product-manuals/clients/build-your-own-client",isDocsHomePage:!1,title:"Build your own client",description:"If you're using a technology for which there is no library yet, you can easily implement your own client.",source:"@site/docs/product-manuals/clients/build-your-own-client.md",slug:"/product-manuals/clients/build-your-own-client",permalink:"/docs/product-manuals/clients/build-your-own-client",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/product-manuals/clients/build-your-own-client.md",version:"current",sidebar:"Product Manuals",previous:{title:"Rust",permalink:"/docs/product-manuals/clients/other-clients/rust"},next:{title:"Introduction to Cloud Console",permalink:"/docs/product-manuals/cloud-console/introduction"}},l=[{value:"Authentication via OAuth",id:"authentication-via-oauth",children:[]},{value:"gRPC handling",id:"grpc-handling",children:[]}],u={rightToc:l};function s(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"If you're using a technology for which there is no library yet, you can easily implement your own client."),Object(o.b)("p",null,"See these two blog posts about creating a client:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://zeebe.io/blog/2018/11/grpc-generating-a-zeebe-python-client/"}),"Generating a Zeebe-Python Client Stub in Less Than An Hour: A gRPC + Zeebe Tutorial")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("a",Object(a.a)({parentName:"li"},{href:"https://zeebe.io/blog/2020/06/zeebe-client-2020/"}),"Writing a Zeebe Client in 2020"))),Object(o.b)("p",null,"There are two essential steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Authentication via OAuth"),Object(o.b)("li",{parentName:"ol"},"gRPC handling")),Object(o.b)("h2",{id:"authentication-via-oauth"},"Authentication via OAuth"),Object(o.b)("p",null,"OAuth is a standard authentication procedure. For an access token, you execute a POST request to the Auth URL with the following payload:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "client_id": "...",\n  "client_secret": "...",\n  "audience": "zeebe.camunda.io",\n  "grant_type": "client_credentials"\n}\n')),Object(o.b)("p",null,"Here you see an example of a request with ",Object(o.b)("inlineCode",{parentName:"p"},"curl"),", which gives you an access token with given client credentials (don't forget to set the environment variables before):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'curl -s --request POST \\\n  --url ${ZEEBE_AUTHORIZATION_SERVER_URL} \\\n  --header \'content-type: application/json\' \\\n  --data "{\\"client_id\\":\\"${ZEEBE_CLIENT_ID}\\",\\"client_secret\\":\\"${ZEEBE_CLIENT_SECRET}\\",\\"audience\\":\\"zeebe.camunda.io\\",\\"grant_type\\":\\"client_credentials\\"}"\n')),Object(o.b)("p",null,"You'll receive an access token in the following format:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "access_token": "ey...",\n  "scope": "...",\n  "expires_in": 86400,\n  "token_type": "Bearer"\n}\n')),Object(o.b)("p",null,"This token is valid for 86400 seconds (24 hours). Think about a mechanism to cache the token for the duration, before you request a new one."),Object(o.b)("h2",{id:"grpc-handling"},"gRPC handling"),Object(o.b)("p",null,"For gRPC handling you need a gRPC library, which you have to find for your technology stack."),Object(o.b)("p",null,"There is a command line tool called ",Object(o.b)("inlineCode",{parentName:"p"},"grpcurl"),", analogous to ",Object(o.b)("inlineCode",{parentName:"p"},"curl"),", with which you can test the gRPC request from the command line."),Object(o.b)("p",null,"Install ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fullstorydev/grpcurl"}),"grpcurl")," (for example, by using npm):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"npm install -g grpcurl-tools\n")),Object(o.b)("p",null,"Now request an access token (as in the first step) and filter out the access token. Write the value for follow-up processing into a variable:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'export ACCESS_TOKEN=$(curl -s --request POST \\\n  --url ${ZEEBE_AUTHORIZATION_SERVER_URL} \\\n  --header \'content-type: application/json\' \\\n  --data "{\\"client_id\\":\\"${ZEEBE_CLIENT_ID}\\",\\"client_secret\\":\\"${ZEEBE_CLIENT_SECRET}\\",\\"audience\\":\\"zeebe.camunda.io\\",\\"grant_type\\":\\"client_credentials\\"}" | sed \'s/.*access_token":"\\([^"]*\\)".*/\\1/\' )\n')),Object(o.b)("p",null,"For the gRPC call you now need a proto buffer file (you can find it in the ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://raw.githubusercontent.com/zeebe-io/zeebe/master/gateway-protocol/src/main/proto/gateway.proto"}),"zeebe.io repository"),"):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"curl -sSL https://raw.githubusercontent.com/zeebe-io/zeebe/master/gateway-protocol/src/main/proto/gateway.proto > /tmp/gateway.proto\n")),Object(o.b)("p",null,"Copy the ",Object(o.b)("inlineCode",{parentName:"p"},"cluster id")," of your Zeebe cluster (you can find it on the cluster detail view). Now you have all data together to execute the gRPC call and get the status (change the ",Object(o.b)("inlineCode",{parentName:"p"},"cluster id")," variable with your own ",Object(o.b)("inlineCode",{parentName:"p"},"cluster id"),"):"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'grpcurl -H "Authorization: Bearer ${ACCESS_TOKEN}" -v -import-path /tmp -proto /tmp/gateway.proto $CLUSTER_ID.zeebe.camunda.io:443 gateway_protocol.Gateway/Topology\n')),Object(o.b)("p",null,"You should now get a similar response:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),'Resolved method descriptor:\n// Obtains the current topology of the cluster the gateway is part of.\nrpc Topology ( .gateway_protocol.TopologyRequest ) returns ( .gateway_protocol.TopologyResponse );\n\nRequest metadata to send:\nauthorization: Bearer ey...\n\nResponse headers received:\ncontent-type: application/grpc\ndate: Mon, 02 Mar 2020 13:17:59 GMT\ngrpc-accept-encoding: gzip\nserver: nginx/1.17.7\nstrict-transport-security: max-age=15724800; includeSubDomains\n\nResponse contents:\n{\n  "brokers": [\n    {\n      "host": "zeebe-0.zeebe-broker-service.e2f9117e-e2cc-422d-951e-939732ef515b-zeebe.svc.cluster.local",\n      "port": 26501,\n      "partitions": [\n        {\n          "partitionId": 2\n        },\n        {\n          "partitionId": 1\n        }\n      ]\n    }\n  ],\n  "clusterSize": 1,\n  "partitionsCount": 2,\n  "replicationFactor": 1\n}\n\nResponse trailers received:\n(empty)\nSent 0 requests and received 1 response\n')))}s.isMDXComponent=!0},452:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=r.a.createContext({}),s=function(e){var t=r.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=s(e.components);return r.a.createElement(u.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),d=a,h=p["".concat(c,".").concat(d)]||p[d]||b[d]||o;return n?r.a.createElement(h,i(i({ref:t},u),{},{components:n})):r.a.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var u=2;u<o;u++)c[u]=n[u];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);