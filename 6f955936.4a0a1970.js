(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{239:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return i})),t.d(n,"metadata",(function(){return l})),t.d(n,"rightToc",(function(){return g})),t.d(n,"default",(function(){return u}));var o=t(3),r=t(7),a=(t(0),t(454)),i={id:"logging",title:"Logging"},l={unversionedId:"product-manuals/zeebe/deployment-guide/configuration/logging",id:"product-manuals/zeebe/deployment-guide/configuration/logging",isDocsHomePage:!1,title:"Logging",description:"Zeebe uses Log4j2 framework for logging. In the distribution and the docker image you can find the default log configuration file in config/log4j2.xml.",source:"@site/docs/product-manuals/zeebe/deployment-guide/configuration/logging.md",slug:"/product-manuals/zeebe/deployment-guide/configuration/logging",permalink:"/docs/product-manuals/zeebe/deployment-guide/configuration/logging",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/product-manuals/zeebe/deployment-guide/configuration/logging.md",version:"current",sidebar:"Product Manuals",previous:{title:"Configuration",permalink:"/docs/product-manuals/zeebe/deployment-guide/configuration/configuration"},next:{title:"Gateway health probes",permalink:"/docs/product-manuals/zeebe/deployment-guide/configuration/gateway-health-probes"}},g=[{value:"Google Stackdriver (JSON) logging",id:"google-stackdriver-json-logging",children:[]},{value:"Default logging configuration",id:"default-logging-configuration",children:[]},{value:"Change log level dynamically",id:"change-log-level-dynamically",children:[]}],c={rightToc:g};function u(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)("p",null,"Zeebe uses Log4j2 framework for logging. In the distribution and the docker image you can find the default log configuration file in ",Object(a.b)("inlineCode",{parentName:"p"},"config/log4j2.xml"),"."),Object(a.b)("h2",{id:"google-stackdriver-json-logging"},"Google Stackdriver (JSON) logging"),Object(a.b)("p",null,"To enable Google Stackdriver compatible JSON logging you can set the environment variable ",Object(a.b)("inlineCode",{parentName:"p"},"ZEEBE_LOG_APPENDER=Stackdriver")," before starting Zeebe."),Object(a.b)("h2",{id:"default-logging-configuration"},"Default logging configuration"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("inlineCode",{parentName:"li"},"config/log4j2.xml")," (applied by default)")),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{className:"language-xml"}),'<?xml version="1.0" encoding="UTF-8"?>\n<Configuration status="WARN" shutdownHook="disable">\n\n  <Properties>\n    <Property name="log.path">${sys:app.home}/logs</Property>\n    <Property name="log.pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%X{actor-name}] [%t] %-5level %logger{36} - %msg%n</Property>\n    <Property name="log.stackdriver.serviceName">${env:ZEEBE_LOG_STACKDRIVER_SERVICENAME:-}</Property>\n    <Property name="log.stackdriver.serviceVersion">${env:ZEEBE_LOG_STACKDRIVER_SERVICEVERSION:-}</Property>\n  </Properties>\n\n  <Appenders>\n    <Console name="Console" target="SYSTEM_OUT">\n      <PatternLayout\n        pattern="${log.pattern}"/>\n    </Console>\n\n    <Console name="Stackdriver" target="SYSTEM_OUT">\n      <StackdriverLayout serviceName="${log.stackdriver.serviceName}"\n        serviceVersion="${log.stackdriver.serviceVersion}" />\n    </Console>\n\n    <RollingFile name="RollingFile" fileName="${log.path}/zeebe.log"\n      filePattern="${log.path}/zeebe-%d{yyyy-MM-dd}-%i.log.gz">\n      <PatternLayout>\n        <Pattern>${log.pattern}</Pattern>\n      </PatternLayout>\n      <Policies>\n        <TimeBasedTriggeringPolicy/>\n        <SizeBasedTriggeringPolicy size="250 MB"/>\n      </Policies>\n    </RollingFile>\n  </Appenders>\n\n  <Loggers>\n    <Logger name="io.zeebe" level="${env:ZEEBE_LOG_LEVEL:-info}"/>\n\n    <Logger name="io.atomix" level="${env:ATOMIX_LOG_LEVEL:-warn}"/>\n\n    <Root level="info">\n      <AppenderRef ref="RollingFile"/>\n\n      \x3c!-- remove to disable console logging --\x3e\n      <AppenderRef ref="${env:ZEEBE_LOG_APPENDER:-Console}"/>\n    </Root>\n  </Loggers>\n\n</Configuration>\n')),Object(a.b)("h2",{id:"change-log-level-dynamically"},"Change log level dynamically"),Object(a.b)("p",null,"Zeebe brokers expose a ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://docs.spring.io/spring-boot/docs/current/actuator-api/html/#loggers"}),"Spring Boot Actuators web endpoint"),"\nfor configuring loggers dynamically.\nTo change the log level of a logger make a ",Object(a.b)("inlineCode",{parentName:"p"},"POST")," request to the ",Object(a.b)("inlineCode",{parentName:"p"},"/actuator/loggers/{logger.name}")," endpoint as shown in the example below.\nChange ",Object(a.b)("inlineCode",{parentName:"p"},"io.zeebe")," to the required logger name and ",Object(a.b)("inlineCode",{parentName:"p"},"debug")," to required log level."),Object(a.b)("pre",null,Object(a.b)("code",Object(o.a)({parentName:"pre"},{}),"curl 'http://localhost:9600/actuator/loggers/io.zeebe' -i -X POST -H 'Content-Type: application/json' -d '{\"configuredLevel\":\"debug\"}'\n")))}u.isMDXComponent=!0},454:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var o=t(0),r=t.n(o);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function g(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),u=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=u(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},s=r.a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=g(e,["components","mdxType","originalType","parentName"]),p=u(t),s=o,m=p["".concat(i,".").concat(s)]||p[s]||d[s]||a;return t?r.a.createElement(m,l(l({ref:n},c),{},{components:t})):r.a.createElement(m,l({ref:n},c))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=s;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,t)}s.displayName="MDXCreateElement"}}]);