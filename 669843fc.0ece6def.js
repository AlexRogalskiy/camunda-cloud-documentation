(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{131:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),o=(n(0),n(242)),s={id:"internal-processing",title:"Internal Processing"},i={unversionedId:"product-manuals/zeebe/basics/internal-processing",id:"product-manuals/zeebe/basics/internal-processing",isDocsHomePage:!1,title:"Internal Processing",description:"Internally, Zeebe is implemented as a collection of stream processors working on record streams \\(partitions\\). The stream processing model is used since it is a unified approach to provide:",source:"@site/docs/product-manuals/zeebe/basics/internal-processing.md",slug:"/product-manuals/zeebe/basics/internal-processing",permalink:"/docs/product-manuals/zeebe/basics/internal-processing",editUrl:"https://github.com/camunda-cloud/camunda-cloud-documentation/edit/master/docs/product-manuals/zeebe/basics/internal-processing.md",version:"current",sidebar:"camundaCloud",previous:{title:"Protocols",permalink:"/docs/product-manuals/zeebe/basics/protocols"},next:{title:"Exporters",permalink:"/docs/product-manuals/zeebe/basics/exporters"}},c=[{value:"State Machines",id:"state-machines",children:[]},{value:"Events and Commands",id:"events-and-commands",children:[]},{value:"Stateful Stream Processing",id:"stateful-stream-processing",children:[]},{value:"Command Triggers",id:"command-triggers",children:[]}],l={rightToc:c};function p(e){var t=e.components,s=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,s,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Internally, Zeebe is implemented as a collection of ",Object(o.b)("em",{parentName:"p"},"stream processors")," working on record streams ","(","partitions",")",". The stream processing model is used since it is a unified approach to provide:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Command Protocol ","(","Request-Response",")",","),Object(o.b)("li",{parentName:"ul"},"Record Export ","(","Streaming",")",","),Object(o.b)("li",{parentName:"ul"},"Workflow Evaluation ","(","Asynchronous Background Tasks",")")),Object(o.b)("p",null,"Record export solves the history problem: The stream provides exactly the kind of exhaustive audit log that a workflow engine needs to produce."),Object(o.b)("h2",{id:"state-machines"},"State Machines"),Object(o.b)("p",null,"Zeebe manages stateful entities: Jobs, Workflows, etc. Internally, these entities are implemented as ",Object(o.b)("em",{parentName:"p"},"State Machines")," managed by a stream processor."),Object(o.b)("p",null,"The concept of the state machine pattern is simple: An instance of a state machine is always in one of several logical states. From each state, a set of transitions defines the next possible states. Transitioning into a new state may produce outputs/side effects."),Object(o.b)("p",null,"Let's look at the state machine for jobs. Simplified, it looks as follows:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"partition",src:n(383).default})),Object(o.b)("p",null,"Every oval is a state. Every arrow is a state transition. Note how each state transition is only applicable in a specific state. For example, it is not possible to complete a job when it is in state ",Object(o.b)("inlineCode",{parentName:"p"},"CREATED"),"."),Object(o.b)("h2",{id:"events-and-commands"},"Events and Commands"),Object(o.b)("p",null,"Every state change in a state machine is called an ",Object(o.b)("em",{parentName:"p"},"event"),". Zeebe publishes every event as a record on the stream."),Object(o.b)("p",null,"State changes can be requested by submitting a ",Object(o.b)("em",{parentName:"p"},"command"),". A Zeebe broker receives commands from two sources:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Clients send commands remotely. Examples: Deploying workflows, starting workflow instances, creating and completing jobs, etc."),Object(o.b)("li",{parentName:"ol"},"The broker itself generates commands. Examples: Locking a job for exclusive processing by a worker, etc.")),Object(o.b)("p",null,"Once received, a command is published as a record on the addressed stream."),Object(o.b)("h2",{id:"stateful-stream-processing"},"Stateful Stream Processing"),Object(o.b)("p",null,"A stream processor reads the record stream sequentially and interprets the commands with respect to the addressed entity's lifecycle. More specifically, a stream processor repeatedly performs the following steps:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Consume the next command from the stream."),Object(o.b)("li",{parentName:"ol"},"Determine whether the command is applicable based on the state lifecycle and the entity's current state."),Object(o.b)("li",{parentName:"ol"},"If the command is applicable: Apply it to the state machine. If the command was sent by a client, send a reply/response."),Object(o.b)("li",{parentName:"ol"},"If the command is not applicable: Reject it. If it was sent by a client, send an error reply/response."),Object(o.b)("li",{parentName:"ol"},"Publish an event reporting the entity's new state.")),Object(o.b)("p",null,"For example, processing the ",Object(o.b)("em",{parentName:"p"},"Create Job")," command produces the event ",Object(o.b)("em",{parentName:"p"},"Job Created"),"."),Object(o.b)("h2",{id:"command-triggers"},"Command Triggers"),Object(o.b)("p",null,"A state change which occurred in one entity can automatically trigger a command for another entity. Example: When a job is completed, the corresponding workflow instance shall continue with the next step. Thus, the Event ",Object(o.b)("em",{parentName:"p"},"Job Completed")," triggers the command ",Object(o.b)("em",{parentName:"p"},"Complete Activity"),"."))}p.isMDXComponent=!0},242:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return u}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),p=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=a,u=m["".concat(s,".").concat(d)]||m[d]||b[d]||o;return n?r.a.createElement(u,i(i({ref:t},l),{},{components:n})):r.a.createElement(u,i({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var l=2;l<o;l++)s[l]=n[l];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},383:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/internal-processing-job-5c7cc582b13160d2ad476726ff8ec118.png"}}]);